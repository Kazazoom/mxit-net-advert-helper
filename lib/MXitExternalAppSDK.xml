<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MXitExternalAppSDK</name>
    </assembly>
    <members>
        <member name="T:MXit.Async.AsyncOperationInfo">
            <summary>
            Information about an asynchronous operation.
            </summary>
        </member>
        <member name="T:MXit.Common.IWithExpandedToString">
            <summary>
            Classes that implement this interface have a ToString method that can create a neatly formatted string
            for objects that are grouped in a hierarchy or tree structure.
            </summary>
            <exclude />
        </member>
        <member name="M:MXit.Common.IWithExpandedToString.ToString(System.Int32,System.String,System.String)">
            <summary>
            Creates a string representation of this object.
            </summary>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Common.IWithExpandedToString.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="F:MXit.Async.AsyncOperationInfo._result">
            <summary>
            See <see cref="P:MXit.Async.AsyncOperationInfo.Result"/>.
            </summary>
        </member>
        <member name="F:MXit.Async.AsyncOperationInfo._context">
            <summary>
            See <see cref="P:MXit.Async.AsyncOperationInfo.Context"/>.
            </summary>
        </member>
        <member name="M:MXit.Async.AsyncOperationInfo.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Async.AsyncOperationInfo.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.Async.AsyncOperationInfo.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Async.AsyncOperationInfo.#ctor(MXit.Async.AsyncOperationResult,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Async.AsyncOperationInfo"/> class.
            </summary>
            <param name="result">The asynchronous operation's result.</param>
            <param name="context">Context information that was associated with the asynchronous request when it was initiated.</param>
        </member>
        <member name="P:MXit.Async.AsyncOperationInfo.Result">
            <summary>
            The asynchronous operation's result.
            </summary>
        </member>
        <member name="P:MXit.Async.AsyncOperationInfo.Context">
            <summary>
            Context information that was associated with the asynchronous request when it was initiated.
            </summary>
        </member>
        <member name="T:MXit.Async.AsyncOperationResult">
            <summary>
            The result of an asynchronous operation.
            </summary>
        </member>
        <member name="F:MXit.Async.AsyncOperationResult.Success">
            <summary>
            The asynchronous operation completed successfully.
            </summary>
        </member>
        <member name="F:MXit.Async.AsyncOperationResult.SystemError">
            <summary>
            A system error occurred while processing the asynchronous operation.
            </summary>
        </member>
        <member name="T:MXit.Billing.PaymentRequest">
            <summary>
            A payment request that can be submitted to a MXit user.
            </summary>
        </member>
        <member name="M:MXit.Billing.PaymentRequest.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Billing.PaymentRequest.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.Billing.PaymentRequest.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Billing.PaymentRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Billing.PaymentRequest"/> class.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.UserId">
            <summary>
            UserId of the user to whom the payment request will be submitted.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.ContactName">
            <summary>
            The context within which the user is currently accessing your ExternalApp.<br/>
            <br/>
            This is the value of the <see cref="P:MXit.Messaging.Message.To"/> parameter of the message the user
            sent to your ExternalApp. I.e. it is the name of the contact within which the user is accessing your
            ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.TransactionReference">
            <summary>
            The payment's unique transaction reference.<br />
            <br />
            The transaction reference has to be unique for each payment request.<br />
            <br />
            This field has a maximum length of 100 characters.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.ProductId">
            <summary>
            The product ID of the product of service for which a payment is being requested, in your organization's product catalogue.<br />
            <br />
            This field has a maximum length of 25 characters.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.ProductName">
            <summary>
            The name of the product or service for which a payment is being requested.<br />
            <br />
            This field has a maximum length of 100 characters.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.ProductDescription">
            <summary>
            A description of the product of service for which a payment is being requested.<br />
            <br />
            This field has a maximum length of 256 characters.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentRequest.MoolaAmount">
            <summary>
            The amount of MXit Moola the MXit user will be charged if he/she confirms this payment request.
            </summary>
        </member>
        <member name="T:MXit.Billing.PaymentResponse">
            <summary>
            Response to a payment request that was submitted to a user.
            </summary>
        </member>
        <member name="M:MXit.Billing.PaymentResponse.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Billing.PaymentResponse.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.Billing.PaymentResponse.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Billing.PaymentResponse.#ctor(System.String,System.String,System.Int32,System.String,MXit.Billing.TransactionResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Billing.PaymentResponse"/> class.
            </summary>
            <param name="userId">UserId of the user to whom the payment request was submitted.</param>
            <param name="contactName">Name of the contact within which the user is currently accessing the ExternalApp.</param>
            <param name="vendorId">VendorId of the vendor account who is be the beneficiary of the payment.</param>
            <param name="transactionReference">Payment transaction reference.</param>
            <param name="transactionResult">Transaction result code.</param>
            <param name="transactionResultMessage">Transaction result description.</param>
        </member>
        <member name="M:MXit.Billing.PaymentResponse.#ctor(System.Int32,MXit.Billing.PaymentRequest,MXit.Billing.TransactionResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Billing.PaymentResponse"/> class.
            </summary>
            <param name="vendorId">The billing VendorId of the billing account that is the beneficiary of this payment.</param>
            <param name="paymentRequest">Payment request for which a response should be created.</param>
            <param name="transactionResult">Transaction result code.</param>
            <param name="transactionResultMessage">Transaction result description.</param>
        </member>
        <member name="P:MXit.Billing.PaymentResponse.UserId">
            <summary>
            UserId of the user to whom the payment request was submitted.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentResponse.ContactName">
            <summary>
            The context within which the user is currently accessing your ExternalApp.<br/>
            <br/>
            This is the value of the <see cref="P:MXit.Messaging.Message.To"/> parameter of the message the user
            sent to your ExternalApp. I.e. it is the name of the contact within which the user is accessing your
            ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentResponse.VendorId">
            <summary>
            The billing VendorId of account that is be the beneficiary of the payment.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentResponse.TransactionReference">
            <summary>
            Payment transaction reference.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentResponse.TransactionResult">
            <summary>
            Transaction result code.
            </summary>
        </member>
        <member name="P:MXit.Billing.PaymentResponse.TransactionResultMessage">
            <summary>
            Short description that describes the transaction result.<br />
            <br />
            If an error occurred, this field will contain the error message.
            </summary>
        </member>
        <member name="T:MXit.Billing.TransactionResult">
            <summary>
            MXit billing transaction result codes.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.Success">
            <summary>
            Transaction successfully executed.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.RejectedByUser">
            <summary>
            Transaction rejected by user (MXit user chose not to confirm the payment request).
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.InvalidUsernameOrPassword">
            <summary>
            Invalid username or password (authentication failure).
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.UserAccountLocked">
            <summary>
            User account is locked (e.g. because of multiple login failures, manual suspension of the account or inability to retrieve authentication info).
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.InsufficientFunds">
            <summary>
            User has insufficient funds.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.Timeout">
            <summary>
            Transaction timed out before a response was received from the user.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.Logout">
            <summary>
            The user logged out without confirming or rejecting the transaction.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.Cancelled">
            <summary>
            The transaction was cancelled.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.InvalidTransaction">
            <summary>
            The transaction parameters are not valid.
            </summary>
        </member>
        <member name="F:MXit.Billing.TransactionResult.SystemError">
            <summary>
            Technical system error occurred.
            </summary>
        </member>
        <member name="T:MXit.Common.CRC">
            <summary>
            Provides methods to compute a cyclic-redundancy-check (CRC) code for raw data.
            </summary>
            <exclude />
        </member>
        <member name="F:MXit.Common.CRC.CRCTable">
            <summary>
            Precomputed table of CRCs for all 8 bit values.
            </summary>
        </member>
        <member name="M:MXit.Common.CRC.BuildTable">
            <summary>
            Build a precomputed crc32 checksum lookup table.
            </summary>
        </member>
        <member name="M:MXit.Common.CRC.Compute(System.Byte[])">
            <summary>
            Compute the crc32 checksum value for a raw data buffer.
            </summary>
            <param name="buf">Data buffer for which which a crc32 checksum should be computed.</param>
            <returns></returns>
        </member>
        <member name="M:MXit.Common.CRC.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compute the crc32 checksum value for part of a raw data buffer.
            </summary>
            <param name="buf">Data buffer.</param>
            <param name="off">Offset in the buffer where the computation should start.</param>
            <param name="len">Length of the buffer to include in the calculation.</param>
            <returns></returns>
        </member>
        <member name="T:MXit.Common.WithExpandedToString">
            <summary>
            Classes that extend this class have a ToString method that can create a neatly formatted string
            for objects that are grouped in a hierarchy or tree structure.
            </summary>
            <exclude />
        </member>
        <member name="M:MXit.Common.WithExpandedToString.ToString(MXit.Common.IWithExpandedToString,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a string representation of <paramref name="obj"/>.
            </summary>
            <param name="obj">The object to create a string representation of.</param>
            <param name="keyValueItemNameWidth">The number of characters to leave open for the key in key-value pairs.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Common.WithExpandedToString.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Common.WithExpandedToString.ToString(System.Int32,System.String,System.String)">
            <summary>
            Creates a string representation of this object.
            </summary>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Common.WithExpandedToString.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="P:MXit.Common.WithExpandedToString.ToStringKeyValueItemNameWidth">
            <summary>
            The number of characters to leave open for the key in key-value pairs that are added in the
            <see cref="M:MXit.Common.WithExpandedToString.ToString"/> implementation.<br/>
            <br/>
            The default width is 20 characters. Inheriting classes can overwrite this to specify a custom widht.
            </summary>
        </member>
        <member name="T:MXit.Log.ConsoleLogger">
            <summary>
            A simple static logger class to log messages to the console.
            </summary>
        </member>
        <member name="M:MXit.Log.ConsoleLogger.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MXit.Log.ConsoleLogger"/> class.
            </summary>
        </member>
        <member name="M:MXit.Log.ConsoleLogger.Log(System.Reflection.MethodBase,System.String,MXit.Log.Level)">
            <summary>
            Logs the specified method.
            </summary>
            <param name="method">The method where the logged action occurred.</param>
            <param name="message">The message to log.</param>
            <param name="level">The type of message to log.</param>
        </member>
        <member name="M:MXit.Log.ConsoleLogger.SetConsoleColor(MXit.Log.Level)">
            <summary>
            Sets the output color of the console.
            </summary>
            <param name="level">The log message level.</param>
        </member>
        <member name="P:MXit.Log.ConsoleLogger.Debug">
            <summary>
            Gets or sets a value indicating whether debugging is enabled or disabled.
            </summary>
            <value><c>true</c> if debuggin is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MXit.Log.Level">
            <summary>
            Log message levels.
            </summary>
        </member>
        <member name="F:MXit.Log.Level.Debug">
            <summary>
            A debug message.
            </summary>
        </member>
        <member name="F:MXit.Log.Level.Info">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:MXit.Log.Level.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="F:MXit.Log.Level.Error">
            <summary>
            A normal error.
            </summary>
        </member>
        <member name="F:MXit.Log.Level.Critical">
            <summary>
            A critical error.
            </summary>
        </member>
        <member name="F:MXit.Log.Level.Fatal">
            <summary>
            A fatal error.
            </summary>
        </member>
        <member name="T:MXit.Messaging.AlignmentType">
            <summary>
            Alignment of table elements.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.None">
            <summary>
            No alignment.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.HorizontalCenter">
            <summary>
            Center horizontal.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.VerticalCenter">
            <summary>
            Center vertical.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.Top">
            <summary>
            Align top.
            </summary>
        </member>
        <member name="F:MXit.Messaging.AlignmentType.Bottom">
            <summary>
            Align bottom.
            </summary>
        </member>
        <member name="T:MXit.Messaging.Data.IImage">
            <summary>
            Interface definition for images that can be included in messages sent to MXit clients.
            </summary>
        </member>
        <member name="T:MXit.Messaging.Data.IImageBase">
            <summary>
            Data structure to access an image registered with the MXit system.
            </summary>
            <exclude />
        </member>
        <member name="P:MXit.Messaging.Data.IImageBase.SendCapabilities">
            <summary>
            If not set, the client should NOT attach capability information when performing an HTTP
            GET operation to retrieve an image.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.IImageBase.Xoffset">
            <summary>
            X-offset on the device's screen.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.IImageBase.Yoffset">
            <summary>
            Y-offset on the device's screen.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.IImageBase.HorisontalSize">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.IImageBase.VerticalSize">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.IImageBase.MillisecondsBetweenFrames">
            <summary>
            Delay between frames (for images with video clip / multi-frame support).
            </summary>
        </member>
        <member name="M:MXit.Messaging.Data.IImage.ImageToBase64(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the image data to a string consisting of base-64 encoded digits.
            </summary>
            <param name="format">Encoding of the image's raw data.</param>
            <returns>Image data as a string consistring of base-64 encoded digits</returns>
        </member>
        <member name="M:MXit.Messaging.Data.IImage.ImageToBase64">
            <summary>
            Converts the image data to a string consisting of base-64 encoded digits.
            </summary>
            <returns>Image data as a string consistring of base-64 encoded digits</returns>
        </member>
        <member name="M:MXit.Messaging.Data.IImage.MD5">
            <summary>
            Calculate an MD5 hash of the image's data.
            </summary>
            <returns>A hex string representing the image's MD5 hash, or an empty string if an error occurred</returns>
        </member>
        <member name="P:MXit.Messaging.Data.IImage.Type">
            <summary>
            Image type.
            </summary>
        </member>
        <member name="T:MXit.Messaging.Data.ImageType">
            <summary>
            Image types.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Data.ImageType.Store">
            <summary>
            Image is stored in MXit's filestore.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Data.ImageType.Download">
            <summary>
            Image is stored on the WWW and can be downloaded from an URL.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Data.ImageType.Raw">
            <summary>
            Image is stored as raw byte data.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Data.ImageType.None">
            <summary>
            Unknown/unassigned image type.
            </summary>
        </member>
        <member name="T:MXit.Messaging.Data.Image">
            <summary>
            Images that can be included in messages sent to MXit clients.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Data.Image.BaseImageBytes">
            <summary>
            Internal system image.
            </summary>
        </member>
        <member name="M:MXit.Messaging.Data.Image.GetBaseImage">
            <summary>
             Creates a new Image object
            </summary>
            <returns></returns>
        </member>
        <member name="F:MXit.Messaging.Data.Image.Url">
            <summary>
            URL where image can be downloaded from.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Data.Image.ImageId">
            <summary>
            MXit filestore content ID where the image can be found.
            </summary>
        </member>
        <member name="M:MXit.Messaging.Data.Image.Convert(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Convert an image to a different format.
            </summary>
            <param name="image">Image to convert.</param>
            <param name="toFormat">Format to which the image should be converted.</param>
            <returns>Converted image</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.ImageToBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an image to a string consisting of base-64 encoded digits.
            </summary>
            <param name="image">Image to convert.</param>
            <param name="format">Format to which the image should be converted.</param>
            <returns>Image data as a string consistring of base-64 encoded digits</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.ImageToBase64(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the image data to a string consisting of base-64 encoded digits.
            </summary>
            <param name="format">Format to which the image should be converted.</param>
            <returns>Image data as a string consistring of base-64 encoded digits</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.ImageToBase64">
            <summary>
            Converts the image data to a string consisting of base-64 encoded digits.
            </summary>
            <returns>Image data as a string consistring of base-64 encoded digits</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.MD5">
            <summary>
            Calculate an MD5 hash over the image's data. 
            </summary>
            <returns>A hex string representing the hash, or an empty string if an error occurred</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.Base64ToImage(System.String)">
            <summary>
            Convert image data to a system image object.
            </summary>
            <param name="base64String">Image data as a string consistring of base-64 encoded digits.</param>
            <returns>System image object</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.ImageCRC">
            <summary>
            Calculate a cyclic-redundancy-check (CRC) code for the image.
            </summary>
            <returns>A cyclic-redundancy-check (CRC) code for the image</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.ImageCRC(System.Drawing.Image)">
            <summary>
            Calculate a cyclic-redundancy-check (CRC) code for an image.
            </summary>
            <param name="image">Image for which a CRC code should be calculated.</param>
            <returns>A cyclic-redundancy-check (CRC) code for the image</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.ReSize(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Resize an image.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="toSize">Width and height to resize the image to.</param>
            <returns>The resized image</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.FromRawStream(System.String)">
            <summary>
            Create an image from a file.
            </summary>
            <param name="filename">Image filename.</param>
            <returns>System image object</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.FromRawStream(System.IO.Stream)">
            <summary>
            Create an image from a raw data stream.
            </summary>
            <param name="stream">Raw image data stream.</param>
            <returns>System image objective</returns>
        </member>
        <member name="M:MXit.Messaging.Data.Image.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Data.Image"/> class.
            </summary>
            <param name="url">URL where the image can be downloaded from.</param>
            <param name="sendCapabilities">If set, the client will attach capability information when performing an HTTP
            GET operation to retrieve the image.</param>
        </member>
        <member name="M:MXit.Messaging.Data.Image.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Data.Image"/> class.
            </summary>
            <param name="id">MXit filestore content ID.</param>
        </member>
        <member name="M:MXit.Messaging.Data.Image.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Data.Image"/> class.
            </summary>
            <param name="base64">Image data as a string of base-64 encoded digits.</param>
        </member>
        <member name="M:MXit.Messaging.Data.Image.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Data.Image"/> class.
            </summary>
            <param name="rawImage">Raw image data buffer.</param>
        </member>
        <member name="M:MXit.Messaging.Data.Image.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Data.Image"/> class.
            </summary>
            <param name="image">System bitmap image.</param>
        </member>
        <member name="P:MXit.Messaging.Data.Image.Type">
            <summary>
            Image type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.Image.SendCapabilities">
            <summary>
            If not set, the client should NOT attach capability information when performing an HTTP
            GET operation to retrieve an image.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.Image.Xoffset">
            <summary>
            X-offset on the device's screen.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.Image.Yoffset">
            <summary>
            Y-offset on the device's screen.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.Image.HorisontalSize">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.Image.VerticalSize">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Data.Image.MillisecondsBetweenFrames">
            <summary>
            Delay between frames (for images with video clip / multi-frame support).
            </summary>
        </member>
        <member name="T:MXit.Messaging.Emoticons">
            <summary>
            Emoticons that can be included in a MXit message.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Happy">
            <summary>
            :)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Sad">
            <summary>
            :(
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Wink">
            <summary>
            ;)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Excited">
            <summary>
            :D
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Shocked">
            <summary>
            :|
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Surprised">
            <summary>
            :O
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.SmileWithTongueOut">
            <summary>
            :P
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Embarrassed">
            <summary>
            :$
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Cool">
            <summary>
            8-)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Heart">
            <summary>
            (H)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Flower">
            <summary>
            (F)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Male">
            <summary>
            (m)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Female">
            <summary>
            (f)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Star">
            <summary>
            (*)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Chilli">
            <summary>
            (c)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Kiss">
            <summary>
            (x)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Idea">
            <summary>
            (i)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.ExtremelyAngry">
            <summary>
            :e
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Censored">
            <summary>
            :x
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Grumpy">
            <summary>
            (z)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Coffee">
            <summary>
            (U)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.MrGreen">
            <summary>
            (G)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.SickThrowup">
            <summary>
            :o(
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.ExtremelySurprised">
            <summary>
            :{
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.HeartEyesInLove">
            <summary>
            :-}
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.RollingEyes">
            <summary>
            8o
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Sobbing">
            <summary>
            :'(
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Thinking">
            <summary>
            :?
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Drooling">
            <summary>
            :~
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Sleeping">
            <summary>
            :z
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.LongNoseLying">
            <summary>
            :L
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Nerdy">
            <summary>
            8|
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Pirate">
            <summary>
            P-)
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Bored">
            <summary>
            :[
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Cold">
            <summary>
            :&lt;
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Confused">
            <summary>
            :,
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Hungry">
            <summary>
            :C
            </summary>
        </member>
        <member name="F:MXit.Messaging.Emoticons.Stressed">
            <summary>
            :s
            </summary>
        </member>
        <member name="T:MXit.Messaging.FileReceived">
            <summary>
            A file received received from a MXit user.
            </summary>
        </member>
        <member name="T:MXit.Messaging.IFileReceived">
            <summary>
            A file received received from a MXit user or service.
            </summary>
            <exclude />
        </member>
        <member name="P:MXit.Messaging.IFileReceived.From">
            <summary>
            The sender of the file.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp sent the file.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IFileReceived.To">
            <summary>
            The recipient of the file.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp received the file.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IFileReceived.MimeType">
            <summary>
            The file's MIME type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IFileReceived.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IFileReceived.Data">
            <summary>
            The file data.
            </summary>
        </member>
        <member name="M:MXit.Messaging.FileReceived.CreateReplyMessage">
             <summary>
             Create a message to reply to the sender of this file.<br />
             <br />
             The reply message will have its From and To fields automatically filled in, by using
             the recipient and sender of this file, and switching them around.
             </summary>
             <returns>Message to reply to the sender of this file.</returns>
             <example>
             <code>
             public void OnMessageReceived(MessageReceived messageReceived)
             {
                 IMessageToSend messageToSend = messageReceived.CreateReplyMessage();
            
                // ...
             }
             </code>
             </example>
        </member>
        <member name="M:MXit.Messaging.FileReceived.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Messaging.FileReceived.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.Messaging.FileReceived.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Messaging.FileReceived.#ctor(System.String,System.String,System.String,System.String,System.Byte[],MXit.User.DeviceInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.FileReceived"/> class.
            </summary>
            <param name="from">UserId of the MXit user, or name of the app, who sent the file.</param>
            <param name="to">UserId of the MXit user, or name of the app, to whom the file was sent.</param>
            <param name="fileName">The file name.</param>
            <param name="mimeType">The file's MIME type.</param>
            <param name="data">The file data.</param>
            <param name="fromDevice">Device used by this file's sender (to create reply messages).</param>
            <param name="hasRootContext">Set this flag to indicate if the file was sent within a root context (i.e. if a "back" service redirect won't make sense).</param>
        </member>
        <member name="P:MXit.Messaging.FileReceived.From">
            <summary>
            The sender of the file.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp sent the file.
            </summary>
        </member>
        <member name="P:MXit.Messaging.FileReceived.To">
            <summary>
            The recipient of the file.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp received the file.
            </summary>
        </member>
        <member name="P:MXit.Messaging.FileReceived.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:MXit.Messaging.FileReceived.MimeType">
            <summary>
            The file's MIME type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.FileReceived.Data">
            <summary>
            The file data.
            </summary>
        </member>
        <member name="P:MXit.Messaging.FileReceived.FromDevice">
            <summary>
            File sender's device.
            </summary>
        </member>
        <member name="P:MXit.Messaging.FileReceived.HasRootContext">
            <summary>
            Indicates if the file was sent within a root context.<br />
            <br />
            If the file was <em>not</em> sent from a root context, it means the service was reached when another
            service redirected to it, in the same context (contact) as the original service. In cases like this the
            application should allow the user to get back to the previous service, by including a "back" service
            redirect somewhere in its menu structure.
            </summary>
        </member>
        <member name="T:MXit.Messaging.ImageAlignment">
            <summary>
            Image alignments.
            </summary>
        </member>
        <member name="F:MXit.Messaging.ImageAlignment.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:MXit.Messaging.ImageAlignment.Center">
            <summary>
            Align center.  Works on images when TextFlow = AloneOnLine.
            </summary>
        </member>
        <member name="F:MXit.Messaging.ImageAlignment.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:MXit.Messaging.ImageAlignment.None">
            <summary>
            No alignment.
            </summary>
        </member>
        <member name="T:MXit.Messaging.IMessage">
            <summary>
            Interface definition for a MXit message.
            </summary>
            <exclude />
        </member>
        <member name="T:MXit.Messaging.IMessageBase">
            <summary>
            Interface definition for the most basic elements of a MXit message.
            </summary>
            <exclude />
        </member>
        <member name="P:MXit.Messaging.IMessageBase.From">
            <summary>
            The message sender.<br />
            <br /> 
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp is sending the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageBase.To">
            <summary>
            The message recipient.<br />
            <br />
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp will receive the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageBase.Body">
            <summary>
            The message body.<br />
            <br />
            The message body may contain text, MXit markup and MXit commands.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessage.Type">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessage.ContainsMarkup">
            <summary>
            A flag to indicate if the message <see cref="P:MXit.Messaging.IMessageBase.Body"/> contains MXit markup.
            </summary>
        </member>
        <member name="T:MXit.Messaging.IMessageToSend">
            <summary>
            Interface definition for a formatted message that can be sent to a MXit user or app.
            </summary>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.CreateEmptyMessage">
            <summary>
            Create a new message with the same attributes and settings as this message, but an
            empty body.<br />
            <br />
            This function will typically be used if you need to create a message that will be sent
            to the same user, with the same device.
            </summary>
            <returns>A new message with the same attributes and settings as this message, but an
            empty body.</returns>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Clear">
            <summary>
            Empty the current message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(System.String)">
            <summary>
            Append text to the message.
            </summary>
            <param name="text">Text to append.</param>
            <returns>The IMessageToSend with the string appended.</returns>
            <example>
            <code>
            messageToSend.Append("Hello World! ");
            messageToSend.Append(Emoticons.Cool);
            messageToSend.AppendLine();
            messageToSend.Append("Some bold text", TextMarkup.Bold);
            messageToSend.AppendLine();
            </code>
            </example>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(System.String,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(System.String,System.Drawing.Color)">
            <summary>
            Append text with color to the message body.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(System.String,System.Drawing.Color,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with color and markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(MXit.Messaging.Emoticons)">
            <summary>
            Append an emoticon image to the message.
            </summary>
            <param name="emoticon">Emoticon to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(MXit.Messaging.Vibes)">
            <summary>
            Append a vibration to the message.
            </summary>
            <param name="vibe">Vibration to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(MXit.Messaging.MessageElements.IMessageElement)">
            <summary>
            Append a message element to the message.
            </summary>
            <param name="element">Message element to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.Append(MXit.Messaging.MessageElements.ICompoundMessageElement)">
            <summary>
            Appends the specified compound message element to the message.
            </summary>
            <param name="compoundMessageElement">The compound message element to append to the message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine">
            <summary>
            Append a new line to the message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(System.String)">
            <summary>
            Append text to the message.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(System.String,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(System.String,System.Drawing.Color)">
            <summary>
            Append text with color to the message body.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(System.String,System.Drawing.Color,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with color and markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(MXit.Messaging.Emoticons)">
            <summary>
            Append an emoticon image to the message.
            </summary>
            <param name="emoticon">Emoticon to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(MXit.Messaging.Vibes)">
            <summary>
            Append a vibration to the message.
            </summary>
            <param name="vibe">Vibration to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(MXit.Messaging.MessageElements.IMessageElement)">
            <summary>
            Append a message element to the message.
            </summary>
            <param name="element">Message element to append.</param>
        </member>
        <member name="M:MXit.Messaging.IMessageToSend.AppendLine(MXit.Messaging.MessageElements.ICompoundMessageElement)">
            <summary>
            Appends the specified compound message element to the message.
            </summary>
            <param name="compoundMessageElement">The compound message element to append to the message.</param>
            <returns>The message.</returns>
        </member>
        <member name="P:MXit.Messaging.IMessageToSend.From">
            <summary>
            The message sender.<br />
            <br /> 
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp is sending the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageToSend.To">
            <summary>
            The message recipient.<br />
            <br />
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp will receive the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageToSend.ToDevice">
            <summary>
            The message recipient's device.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageToSend.Body">
            <summary>
            The message body.<br />
            <br />
            The message body may contain text, MXit markup and MXit commands.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageToSend.ContainsMarkup">
            <summary>
            A flag to indicate if the message <see cref="P:MXit.Messaging.IMessageBase.Body"/> contains MXit markup.
            </summary>
        </member>
        <member name="P:MXit.Messaging.IMessageToSend.MaySpool">
            <summary>
            A flag to indicate if this message may be spooled.<br />
            <br />
            If the message may be spooled, and the recipient user is offline at the time when the
            message is sent, the message will be kept for a few days and delivered the moment the
            user comes back online. The amount of time for which messages will be spooled before
            they are discarded is configured on the spool server and depends mostly on available
            resources. In general you can expect a message to be kept for at least 24 hours.<br />
            <br />
            If the message may not be spooled, and the message recipient is offline, the message 
            will be discarded immediately.<br />
            <br />
            NB: Developers may need to obtain special permission to be able to use this feature.
            The privilidge to use this feature may also be revoked if it is abused (e.g. sending
            of SPAM).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageBuilder">
            <summary>
            MessageBuilder contains utilities to create formatted messages that can be sent to MXit
            clients.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageBuilder.ColorRegex">
            <summary>
            Regular expression to match color markup tags.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CleanMXitColorMarkup(System.String)">
            <summary>
            Remove all MXit color markup from a string.
            </summary>
            <param name="text">A string which may contain MXit color markup.</param>
            <returns>A string with all color markup removed.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CleanMXitMarkup(System.String)">
            <summary>
            Remove all MXit client markup from a string.
            </summary>
            <param name="text">A string which may contain MXit client markup.</param>
            <returns>A string with all markup removed.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateImage(System.String)">
            <summary>
            Creates a new image object.
            </summary>
            <param name="base64">Image data as a string consisting of base-64 encoded digits.</param>
            <returns>
            Created image object.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateImage(System.String,System.Boolean)">
            <summary>
            Creates a new image object.
            </summary>
            <param name="base64">Image data as a string consisting of base-64 encoded digits.</param>
            <param name="isRawImage">Flag to indicate if the image is encoded (JPG, PNG, etc.).</param>
            <returns>Created image object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateImage(System.Byte[])">
            <summary>
            Creates a new image object.
            </summary>
            <param name="image">Raw image data consisting of an array of byte.</param>
            <returns>Created image object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateImage(System.Drawing.Bitmap)">
            <summary>
            Creates a new image object.
            </summary>
            <param name="image">The image that is a Bitmap.</param>
            <returns>
            Created image object.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateRawImageFromStream(System.IO.Stream)">
            <summary>
            Creates a new image object.
            </summary>
            <param name="stream">Image data stream.</param>
            <returns>Created image object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateRawImageFromStream(System.String)">
            <summary>
            Creates a new image object.
            </summary>
            <param name="fileName">Image filename.</param>
            <returns>Created image object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateDevice">
            <summary>
            Create a default device object, with very limited capabilities.
            </summary>
            <returns>Device object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateDevice(MXit.User.DeviceInfo)">
            <summary>
            Create a device object, that defines the features of a MXit user's device.
            </summary>
            <param name="device">Creates a new instance of the device features supported by the message recipient's device.</param>
            <returns>Device object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateDevice(MXit.User.DeviceFeatures,System.Int32,System.Int32)">
            <summary>
            Create a device object, that defines the features of a MXit user's device.
            </summary>
            <param name="deviceFeatures">Bitwise OR of device features supported by the message recipient's device.</param>
            <param name="displayWidth">Device display width (in pixels).</param>
            <param name="displayHeight">Device display height (in pixels).</param>
            <returns>Device object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateMessageToSend(System.String,MXit.User.IUserInfo)">
            <summary>
            Create a message object to send data to a MXit user or service.
            </summary>
            <param name="from">The contact name of the service from whom this message will be sent.</param>
            <param name="toUser">MXit user to whom this message will be sent.</param>
            <returns>Message object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateMessageToSend(System.String,System.String,MXit.User.IDeviceInfo)">
            <summary>
            Create a message object to send data to a MXit user or service.
            </summary>
            <param name="from">The contact name of the service from whom this message will be sent.</param>
            <param name="to">UserId of the MXit user, or app name, to whom the message will be sent.</param>
            <param name="toDevice">Message recipient's device.</param>
            <returns>Message object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.CreateMessageToSend(System.String,System.String)">
            <summary>
            Create a message object to send data to a MXit user or service.<br />
            <br />
            NB: If you use this function to create messages to send, it will be assumed that the
            user is using a very basic device, that does not have support for any advanced features
            or message elements.
            </summary>
            <param name="from">The contact name of the service from whom this message will be sent.</param>
            <param name="to">UserId of the MXit user, or app name, to whom the message will be sent.</param>
            <returns>Message object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.ExtractReply(MXit.Messaging.MessageReceived)">
            <summary>
            Extract a dictionary of named responses.
            </summary>
            <param name="message"></param>
            <returns>Empty dictionary if message type isn't Command or AutoCommand.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.ExtractReply(System.String)">
            <summary>
            
            </summary>
            <param name="messageReceivedBody"></param>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.ExtractReply(MXit.Messaging.MessageElements.Replies.ICommandReplyBase)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.ExtractReply(MXit.Messaging.MessageReceived,System.String)">
            <summary>
             Get the reply for an element with a specific name
            </summary>
            <param name="message"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MXit.Messaging.MessageBuilder.MarkupState">
            <summary>
            This struct is used to parse MXit client messages, to find and remove markup.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageBuilder.Elements">
            <summary>
            Factory class to create elements that can be included in MXit messages.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateTextWithMarkup(System.String,MXit.Messaging.TextMarkup)">
            <summary>
            Create message-body text with MXit markup (bold, italics, etc.).
            </summary>
            <param name="text">Text to encode.</param>
            <param name="markup">Type of markup.</param>
            <returns>Encoded message-body text.</returns>
            <remarks>
            Not all devices support markup. You have to test the device
            features before assigning this text to a message body.
            If you make use of the associated IMXitMessage own Append and AppendLine
            methods, the checks will be done and the correct markup will
            be added.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateTextWithColor(System.String,System.Drawing.Color)">
            <summary>
            Create message-body text with MXit color-markup.
            </summary>
            <param name="text">Text to encode.</param>
            <param name="color">Color to add (Color.EMPTY for default).</param>
            <returns>Encoded message-body text.</returns>
            <remarks>
            Not all devices support markup. You have to test the device
            features before assigning this text to a message body.
            If you make use of the associated IMXitMessage own Append and AppendLine
            methods, the checks will be done and the correct markup will
            be added.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateEmoticon(MXit.Messaging.Emoticons)">
            <summary>
            Create message-body text for an emoticon.
            </summary>
            <param name="emoticon">Emoticon to encode.</param>
            <returns>Encoded message-body text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateVibe(MXit.Messaging.Vibes)">
            <summary>
            Create message-body text for a vibe (vibration).
            </summary>
            <param name="vibe">Vibe to encode.</param>
            <returns>Encoded message-body tex.t</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateFrameSet">
            <summary>
            Creates the frame set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageStripReference(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the image strip reference.
            </summary>
            <param name="name">The name.</param>
            <param name="frameWidth">Width of the frame.</param>
            <param name="frameHeight">Height of the frame.</param>
            <param name="layer">The layer.</param>
            <param name="frameCount">The frame count.</param>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateClearScreen">
            <summary>
            Create a message element to clear the device's chat screen.
            </summary>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create an inline image element from raw image data, scaled to a specified width and
            height.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create an inline image element from raw image data, scaled to a percentage of the
            device's display width.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create an inline image element from a URL, scaled to a specified width and height.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="sendCapabilities">
            If set to <c>true</c>, the client will also send it's capabilities when doing
            an HTTP GET to retrieve the image. NB: Some websites don't support this feature and it may break
            image fetching.
            </param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Boolean)">
            <summary>
            Create an inline image element from a URL, using the actual imagesize.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="sendCapabilities">
            If set to <c>true</c>, the client will also send it's capabilities when doing
            an HTTP GET to retrieve the image. NB: Some websites don't support this feature and it may break
            image fetching.
            </param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Boolean)">
            <summary>
            Create an inline image element from a URL, scaled to a percentage of the device's display width.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="sendCapabilities">
            If set to <c>true</c>, the client will also send it's capabilities when doing
            an HTTP GET to retrieve the image. NB: Some websites don't support this feature and it may break
            image fetching.
            </param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create an inline image element from a system bitmap object, scaled to a specified width
            and height.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create an inline image element from a system bitmap object, scaled to a percentage of
            the device's display width.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create an inline image element from an IImage, scaled to a specified width and height.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateInlineImage(MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create an inline image element from an IImage, scaled to a percentage of the device's
            display width.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateLink(System.String,System.String,System.String,System.String)">
            <summary>
            Add an element that allow the recipient to make a selection.
            </summary>
            <param name="name">The unique name of the element to identify the reply.</param>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="displayMessage">Message to display to the user after he selects the link.</param>
            <param name="replyMessage">Return text to send back when the user selects the link.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
            <remarks>
            When the link is selected a reply message is returned with the
            value property the reply message.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateLink(System.String,System.String,System.String)">
            <summary>
            Add an element that allow the recipient to make a selection.
            </summary>
            <param name="name">The unique name of the element to identify the reply.</param>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="displayMessage">Message to display to the user after he selects the link.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
            <remarks>
            When the link is selected a reply message is returned with the
            value property the link text (in this case selectableMessage).
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateLink(System.String,System.String)">
            <summary>
            Add an element that allow the recipient to make a selection.
            </summary>            
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="replyMessage">Return text to send back when the user selects the link.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
            <remarks>
            When the link is selected a reply message is returned with the
            value property the link text.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateLink(System.String)">
            <summary>
            Add an element that allow the recipient to make a selection.
            </summary>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
            <remarks>
            When the link is selected a normal message is returned with the
            link text in the body.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create a selectable image element from raw image data, scaled to a specified width and
            height.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create a selectable image element from raw image data, scaled to a percentage of the
            device's display width.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create a selectable image element from a URL, scaled to a specified width and height.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create a selectable image element from a URL, scaled to a percentage of the device's display width.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create a selectable image element from a system bitmap object, scaled to a specified width
            and height.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create a selectable image element from a system bitmap object, scaled to a percentage of
            the device's display width.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Create a selectable image element from an IImage, scaled to a specified width and height.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateImageLink(System.String,MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Create a selectable image element from an IImage, scaled to a percentage of the device's
            display width.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <returns>An inline image element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateBrowserLink(System.String,System.String)">
            <summary>
            Add an element to open the default device browser.
            </summary>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="url">URL to open if the user selects this element.</param>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateBrowserLink(System.String,System.String,System.String)">
            <summary>
            Add an element to open the default device browser.
            </summary>
            <param name="name">Message element name (should be unique).</param>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="url">URL to open if the user selects this element.</param>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateCustomEmoticon(System.String)">
            <summary>
            Create a custom emoticon message element from an emoticon pack.
            </summary>
            <param name="id">Custom emoticon ID.</param>
            <returns>Custom emoticon message element.</returns>
            <remarks>The custom emoticon pack needs to be installed on the download site.</remarks>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,System.String)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="alert">Text to display in an alert menu (often used in conjunction with the menu field).</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,MXit.Messaging.MessageElements.IPopupMenu)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="popup">Popup menu for the chat screen.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,System.String,MXit.Messaging.MessageElements.IPopupMenu)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="alert">Text to display in an alert menu (often used in conjunction with the menu field).</param>
            <param name="popup">Popup menu for the chat screen.</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,MXit.Messaging.MessageElements.IClientColors)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="colors">Background color that (overrides the background color of the client chat screen).</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,System.String,MXit.Messaging.MessageElements.IClientColors)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="alert">Text to display in an alert menu (often used in conjunction with the menu field).</param>
            <param name="colors">Background color that (overrides the background color of the client chat screen).</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,MXit.Messaging.MessageElements.IPopupMenu,MXit.Messaging.MessageElements.IClientColors)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="popup">Popup menu for the chat screen.</param>
            <param name="colors">Background color that (overrides the background color of the client chat screen).</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenConfig(MXit.Messaging.MessageElements.ChatScreenBehaviourType,System.String,MXit.Messaging.MessageElements.IPopupMenu,MXit.Messaging.MessageElements.IClientColors)">
            <summary>
            Create a message element to set the behaviour of a MXit client's chat screen.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="alert">Text to display in an alert menu (often used in conjunction with the menu field).</param>
            <param name="popup">Popup menu for the chat screen.</param>
            <param name="colors">Background color that (overrides the background color of the client chat screen).</param>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateChatScreenInfo">
            <summary>
            Create a message element to retrieve information about the client's chat screen.<br />
            <br />
            The chat screen behaviour, dimensions and background and foreground colors will be returned
            in the reply message (of type ChatScreenInfoReply).
            </summary>
            <returns>Message element that can be added to a message to a MXit client.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateTextMenuItem(System.String,System.String,System.String)">
            <summary>
            Create a text menu item.
            </summary>
            <param name="selectText">The text the user should type in to select this menu item.</param>
            <param name="descriptionText">The menu item description text.</param>
            <param name="name">This menu item's <see cref="T:MXit.Messaging.MessageElements.Link"/> message element's name (should be unique).</param>
            <returns>A text menu item message element that can be included in a MXit message.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateClientColors">
            <summary>
            Create a container to set / retrieve MXit client colors.
            </summary>
            <returns>Container to set / retrieve MXit client colors.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateClientColors(MXit.Messaging.MessageElements.ClientColorType,System.Drawing.Color)">
            <summary>
            Create a container to set / retrieve MXit client colors.
            </summary>
            <param name="type">Client color type (for the first type in the list).</param>
            <param name="color">Color to associate with the type (for the first type in the list).</param>
            <returns>Container to set / retrieve MXit client colors.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreatePopupMenu">
            <summary>
            Create a chat screen popup menu.
            </summary>
            <returns>A popup menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateTable(MXit.User.IDeviceInfo,System.String,System.Int32,System.Int32)">
            <summary>
            Create a table element.
            </summary>
            <param name="toDeviceInfo">Device information for the user to whom this table will be sent.</param>
            <param name="name">Unique name for the table.</param>
            <param name="cols">Number of columns.</param>
            <param name="rows">Number of rows.</param>
            <returns>A table element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateTable(MXit.User.IUserInfo,System.String,System.Int32,System.Int32)">
            <summary>
            Create a table element.
            </summary>
            <param name="toUser">The user to whom this table will be sent.</param>
            <param name="name">Unique name for the table.</param>
            <param name="cols">Number of columns.</param>
            <param name="rows">Number of rows.</param>
            <returns>A table element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageBuilder.Elements.CreateTable(MXit.Messaging.IMessageToSend,System.String,System.Int32,System.Int32)">
            <summary>
            Create a table element.
            </summary>
            <param name="message">The message this table is part of.</param>
            <param name="name">Unique name for the table.</param>
            <param name="cols">Number of columns.</param>
            <param name="rows">Number of rows.</param>
            <returns>A table element.</returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.Action">
            <summary>
            An action to perform when a data cell is selected.<br />
            <br />
            Instances are created via ITable.CreateAction
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.IAction">
            <summary>
            Interface definition for an action to perform when a data cell is selected.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Actions.Action._Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.Action.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element, and
            set this object's dirty flag to false.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.Action.DoEncode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.<br />
            <br />
            This function is called by the Encode() function, and should be overridden by
            sub-classes that inherit from this class.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.Action.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.ActionBuilder">
            <summary>
            A class to create actions for table data cells.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.IActionBuilder">
            <summary>
            Interface to create actions for table data cells.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.Select">
            <summary>
            Create a new "select" action, with a selection limit of 1 and auto-submit set to false.<br />
            <br />
            A select action can be assigned to a cell to make it selectable.
            </summary> 
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.Select(System.Int32,System.Boolean)">
            <summary>
            Create a new "select" action.<br />
            <br />
            A select action can be assigned to a cell to make it selectable.
            </summary> 
            <param name="selectionLimit">Maximum number of items that may be selected.</param>
            <param name="autoSubmit">If true, a submit operation will be automatically performed when the selection limit is reached.</param>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.Place">
            <summary>
            Create a new "place" action.
            </summary>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.Place(System.Int32,System.Boolean)">
            <summary>
            Create a new "place" action.
            </summary> 
            <param name="placeLimit">Maximum number of items that may be selected.</param>
            <param name="autoSubmit">If true, a submit operation will be automatically performed when the selection limit is reached.</param>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.Submit(MXit.Messaging.MessageElements.ITable)">
            <summary>
            Create a new "submit" action.
            </summary>
            <param name="table">Table to associate with the submit action.</param>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.None">
            <summary>
            Create an empty action.
            </summary>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.IActionBuilder.Clear">
            <summary>
            Clear all actions - remember to clear the actions from the table cells also (or assign new actions).
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.Select">
            <summary>
            Create a new "select" action, with a selection limit of 1 and auto-submit set to false.<br />
            <br />
            A select action can be assigned to a cell to make it selectable.
            </summary>
            <returns>
            An action that can be assigned to a cell in a table.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.Select(System.Int32,System.Boolean)">
            <summary>
            Create a new "select" action.<br />
            <br />
            A select action can be assigned to a cell to make it selectable.
            </summary>
            <param name="selectionLimit">Maximum number of items that may be selected.</param>
            <param name="autoSubmit">If true, a submit operation will be automatically performed when the selection limit is reached.</param>
            <returns>
            An action that can be assigned to a cell in a table.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.Place">
            <summary>
            Create new a "place" action.
            </summary>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.Place(System.Int32,System.Boolean)">
            <summary>
            Create a new "place" action.
            </summary> 
            <param name="placeLimit">Maximum number of items that may be selected.</param>
            <param name="autoSubmit">If true, a submit operation will be automatically performed when the selection limit is reached.</param>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.Submit(MXit.Messaging.MessageElements.ITable)">
            <summary>
            Create a new "submit" action.
            </summary>
            <param name="table">Table to associate with the submit action.</param>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.None">
            <summary>
            Create an empty action.
            </summary>
            <returns>An action that can be assigned to a cell in a table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.ActionBuilder.Clear">
            <summary>
            Clear all actions - remember to clear the actions from the table cells also (or assign new actions).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.ActionBuilder.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.INoAction">
            <summary>
            Interface definition for an action that can be assigned to a cell, so that nothing will
            happen (no action is taken) if that cell is selected.<br />
            <br />
            This type of action will typically be assigned to a cell, if the contents of that cell is
            only meant to be viewed (i.e. no user input or interaction is expected).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.IPlaceAction">
            <summary>
            Interface definition for an action that can be assigned to a cell, so that the cell may
            serve as the recipient (target) of a place action.<br />
            <br />
            A place action will typically be assigned to cells where a game piece, that was picked up
            somewhere else, can be placed.<br />
            <br />
            Instances are created via ITable.CreateAction.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.IPlaceAction.SelectedFrames">
            <summary>
            The frameset that must to be applied to the selected cell (the cell that was clicked on
            by the user, before the cell this action is assigned to was clicked on), when an item
            is placed in this cell.<br />
            <br />
            Typically this frameset will remove an object from the selected cell. E.g. when a user
            moves a piece from one cell (the selected cell) to another cell (this cell, the
            target cell).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.IPlaceAction.PlacedFrames">
            <summary>
            The frameset that must be applied to the target cell (i.e. the cell this action is
            assigned to), when an item is placed in the target cell.<br />
            <br />
            Typically this frameset will place the object that used to be in the selected cell,
            in the target cell.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.IPlaceAction.Limit">
            <summary>
            Maximum number of placements.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.IPlaceAction.AutoSubmit">
            <summary>
            If set to true, a submit action will be automatically performed when the placement
            limit is reached.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.ISelectAction">
            <summary>
            Interface definition for an action that can be assigned to a cell, to make it selectable.<br />
            <br />
            One or more items can be selected, depending on the numSelections value.<br />
            Selections can be sent to the backend when a certain threshold is crossed (specified by numSelections), 
            when the user clicks on submit, or can be used as part of the place operation.<br />
            <br />
            Instances are created via ITable.CreateAction
            </summary> 
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.ISelectAction.SelectedFrames">
            <summary>
            The frameset that should be applied to the cell with which this action is associated,
            when that cell is selected. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.ISelectAction.Limit">
            <summary>
            Maximum number of selections.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.ISelectAction.AutoSubmit">
            <summary>
            If set to true, a submit action will be automatically performed when the selection
            limit is reached.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.ISubmitAction">
            <summary>
            Interface definition for an action that can be assigned to a cell, so that the selections
            on a table will be submitted (sent back to the backend), if the user clicks on the cell.<br />
            <br />
            Instances are created via ITable.CreateAction.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.ISubmitAction.Table">
            <summary>
            Table whose selections should be submitted when the user clicks on the cell this action
            is assigned to.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.NoAction">
            <summary>
            An action that can be assigned to a cell, so that nothing will happen (no action is taken)
            if that cell is selected.
            
            This type of action will typically be assigned to a cell, if the contents of that cell is
            only meant to be viewed (i.e. no user input or interaction is expected).
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.NoAction.DoEncode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.<br />
            <br />
            This function is called by the Encode() function, and should be overridden by
            sub-classes that inherit from this class.
            </summary>
            <returns>
            Encoded element text.
            </returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.PlaceAction">
            <summary>
            An action that can be assigned to a cell, so that the cell may serve as the recipient
            (target) of a place action.<br />
            <br />
            A place action will typically be assigned to cells where a game piece, that was picked up
            somewhere else, can be placed.<br />
            <br />
            Instances are created via ITable.CreateAction.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.PlayAction">
            <summary>
            Represents the actions that represents the playing of the game, currently selecting a piece and placing
            it somewhere. One or more items can be selected or placed up to the limit value and if auto submit
            is true the current state is sent to the backend.
            </summary> 
        </member>
        <member name="F:MXit.Messaging.MessageElements.Actions.PlayAction._SelectedFrames">
            <summary>
            The frameset that should be applied to the selection cell with which this action is
            associated. 
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Actions.PlayAction._limit">
            <summary>
            Maximum number of selections / placements.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Actions.PlayAction._autoSubmit">
            <summary>
            If set to true, a submit action will be automatically performed when the selection / placement limit is reached.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.PlayAction.SelectedFrames">
            <summary>
            The frameset that should be applied to the selection cell with which this action is
            associated. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.PlayAction.Limit">
            <summary>
            Maximum number of selections / placements.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.PlayAction.AutoSubmit">
            <summary>
            If set to true, a submit action will be automatically performed when the selection / placement limit is reached.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.PlayAction.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.PlaceAction.DoEncode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.<br/>
            <br/>
            This function is called by the Encode() function, and should be overridden by
            sub-classes that inherit from this class.
            </summary>
            <returns>
            Encoded element text.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.PlaceAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Actions.PlaceAction"/> class.
            </summary>
            Default constructor (sets the placement limit to 1 and auto-submit to true).
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.PlaceAction.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Actions.PlaceAction"/> class.
            </summary>
            <param name="placeLimit">Maximum number of placements.</param>
            <param name="autoSubmit">If set to true, a submit action will be automatically performed when the placement limit is reached.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.PlaceAction.PlacedFrames">
            <summary>
            The frameset that must be applied to the target cell (i.e. the cell this action is
            assigned to), when an item is placed in the target cell.<br />
            <br />
            Typically this frameset will place the object that used to be in the selected cell,
            in the target cell.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.PlaceAction.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.SelectAction">
            <summary>
            An action that can be assigned to a cell, to make it selectable.<br />
            <br />
            One or more items can be selected, depending on the numSelections value. 
            Selections can be sent to the backend when a certain threshold is crossed (specified by numSelections), 
            when the user clicks on submit, or can be used as part of the place operation.<br />
            <br />
            Instances are created via ITable.CreateAction.
            </summary> 
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.SelectAction.DoEncode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.<br/>
            <br/>
            This function is called by the Encode() function, and should be overridden by
            sub-classes that inherit from this class.
            </summary>
            <returns>
            Encoded element text.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.SelectAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Actions.SelectAction"/> class.
            </summary>
            Default constructor (sets selection limit to 1 and auto-submit to true).
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.SelectAction.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Actions.SelectAction"/> class.
            </summary>
            <param name="selectionLimit">Maximum number of selections.</param>
            <param name="autoSubmit">If set to true, a submit action will be automatically performed when the selection limit is reached.</param>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Actions.SubmitAction">
            <summary>
            An action that can be assigned to a cell, so that the selections on a table will be
            submitted (sent back to the backend), if the user clicks on the cell.<br />
            <br />
            Instances are created via ITable.CreateAction.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.SubmitAction.DoEncode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.<br />
            <br />
            This function is called by the Encode() function, and should be overridden by
            sub-classes that inherit from this class.
            </summary>
            <returns>
            Encoded element text.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Actions.SubmitAction.#ctor(MXit.Messaging.MessageElements.ITable)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Actions.SubmitAction"/> class.
            </summary>
            <param name="table">Table whose selections should be submitted when the user clicks on the cell this action is assigned to.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Actions.SubmitAction.Table">
            <summary>
            Table whose selections should be submitted when the user clicks on the cell this action
            is assigned to.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.BoxStyle">
            <summary>
            Style of a boxed element.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IBoxStyle">
            <summary>
            Interface definition to describe the style of a boxed element.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IEncodableElement">
            <summary>
            Interface definition for an ecodable element.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IEncodableElement.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.Margin">
            <summary>
            The box's margin.<br />
            <br />
            The margin runs round the outside of the box's border.<br />
            <br />
            If the margin has a 0 width, the margin edge is the same as the border edge.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.Border">
            <summary>
            The box's border.<br />
            <br />
            The border runs between the box's padding and its margin.<br />
            <br />
            If the border has 0 width, the border edge is the same as the padding edge.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.Padding">
            <summary>
            The box's padding.<br />
            <br />
            The padding runs between the box's contents and its border.<br />
            <br />
            If the padding has 0 width, the padding edge is the same as the content edge. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.BorderColor">
            <summary>
            Border color.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.Color">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.Background">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBoxStyle.Align">
            <summary>
            Alignment of text within the box.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.EncodeColor(System.Text.StringBuilder,System.String,System.Drawing.Color)">
            <summary>
            Encode a single color. If the value of the color is 0, it is assumed to be fully transparent
            and will not be encoded at all.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.EncodeMargin(System.Text.StringBuilder,System.String,MXit.Messaging.MessageElements.Margin)">
            <summary>
            Encode a margin.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.Equals(System.Object)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="obj">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.Equals(MXit.Messaging.MessageElements.BoxStyle)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="style">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.GetHashCode">
            <summary>
            Generate a hash code for this object.
            </summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.BoxStyle"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.#ctor(MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.BoxStyle"/> class.
            </summary>
            <param name="style">Object to copy.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.BoxStyle.#ctor(MXit.Messaging.AlignmentType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.BoxStyle"/> class.
            </summary>
            <param name="align">Alignment of text within the boxed element.</param>
            <param name="borderCol">Border color.</param>
            <param name="background">Background color.</param>
            <param name="color">Text color.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Margin">
            <summary>
            The box's margin.<br/>
            <br/>
            The margin runs round the outside of the box's border.<br/>
            <br/>
            If the margin has a 0 width, the margin edge is the same as the border edge.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Border">
            <summary>
            The box's border.<br/>
            <br/>
            The border runs between the box's padding and its margin.<br/>
            <br/>
            If the border has 0 width, the border edge is the same as the padding edge.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Padding">
            <summary>
            The box's padding.<br/>
            <br/>
            The padding runs between the box's contents and its border.<br/>
            <br/>
            If the padding has 0 width, the padding edge is the same as the content edge.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.BorderColor">
            <summary>
            Border color.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Color">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Background">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.BoxStyle.Align">
            <summary>
            Alignment of text within the box.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Browser">
            <summary>
            Perform the MIDP 2.0 MIDlet.platformRequest command. This is 
            used to open a browser or install an application.
            </summary>
            <remarks>
            selmsg  - the selectable message that is displayed to the user
            dest    - the url that is used by the platformRequest function e.g.
                      http://www.mxit.com/wap/mxitj/mxitj.jad to download and install a MXit application
                      http://www.mxit.com/wap/ringtones/funkyjingle.wav to download a ringtone
                      
            NOTE: 
                Most phones cannot open the wap browser without 
                closing the MXit application - so only one ringtone/java
                app can be downloaded at a time. However, a phone call
                can usually be made without exiting from MXit.
                
            Remember to escape the ":" character (":" should be "%3a")
            </remarks>
            <example>
            Request:
                op=cmd|type=platreq|selmsg=upgrade MXit|dest=http%3a//www.mxit.com/wap/mxitj/mxitj.jad
                
            Reply:
                type=platreq|err=0
            </example>
        </member>
        <member name="T:MXit.Messaging.MessageElements.MessageElement">
            <summary>
            Message elements / commands are handled seperately from custom forms (although the same
            parsing rules are used).<br />
            <br />
            Each command MUST have the following parameters:
                op=cmd          - shows that this a command.
                type=thetype    - the type of the command.
                id=value        - a crc32 that is used to check that the command
                                  is valid. To make the checking of the
                                  crc32 easier the id= parameter MUST be the last
                                  in the list of parameters.
                
            Each command COULD have the following parameters
                nm=thename          - the name of the command. The client does
                                      not do anything with the name. It is just returned to
                                      the backend. It can be used to match request and responses. 
                auto=true           - if set the, command is executed without user intervention (eg. selmsg ignored/not needed)
                noshow=true         - if set the, message is not shown to the client at all.
                	                  This only really makes sense for auto messages.
                displaymsg=themsg   - message that is displayed in the relevant 
                	                  conversation screen (as an info message e.g. in gray) upon 
                	                  completion of the command.
                	
                Note: No replies are sent for unstructured auto commands. 
                   
            Each command MUST have the following parameters in the reply:
                type=cmdname    - the type of the command.
                err=errorcode   - the error (result) code of the command.  
                
            The following error codes are defined: 
                err = 0 - success.
                      1 - if sms could not be sent.
                      2 - if there was a security exception (user denied access).         
                      6 - the destination url (or telephone number) is not valid
                          or does not point to a downloadable resource.	 
                      7 - invalid id.
            </summary>
            <exclude />
        </member>
        <member name="T:MXit.Messaging.MessageElements.IMessageElement">
            <summary>
            Interface definition for a MXit message element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMessageElement.ElementType">
            <summary>
            The type of this message element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMessageElement.RequiredFeatures">
            <summary>
            The features a device will need to render this element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMessageElement.Name">
            <summary>
            A unique name for this message element.<br />
            <br />
            This parameter will be used as the value for the element's "nm" parameter.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMessageElement.ShouldAutoExecute">
            <summary>
            When this flag is set, this command will execute automatically without the user having
            to select or initiate anything.<br />
            <br />
            This parameter will be used as the value for the command's "auto" parameter.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMessageElement.DisplayMessage">
            <summary>
            The message that should be displayed to the user after this command is executed.<br />
            <br />
            This parameter will be used as the value for the command's "displaymsg" parameter.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMessageElement.SelectableMessage">
            <summary>
            A selectable message that should be displayed to the user before this command is
            executed.<br />
            <br />
            When the user selects this message, the command will execute.<br />
            <br />
            This parameter will be used as the value for the command's "selmsg" parameter.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElement._elementType">
            <summary>
            See <see cref="P:MXit.Messaging.MessageElements.MessageElement.ElementType"/>.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElement._requiredFeatures">
            <summary>
            See <see cref="P:MXit.Messaging.MessageElements.MessageElement.RequiredFeatures"/>.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElement._name">
            <summary>
            See <see cref="P:MXit.Messaging.MessageElements.MessageElement.Name"/>.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElement._shouldAutoExecute">
            <summary>
            See <see cref="P:MXit.Messaging.MessageElements.MessageElement.ShouldAutoExecute"/>.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElement._displayMessage">
            <summary>
            See <see cref="P:MXit.Messaging.MessageElements.MessageElement.DisplayMessage"/>.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElement._selectableMessage">
            <summary>
            See <see cref="P:MXit.Messaging.MessageElements.MessageElement.SelectableMessage"/>.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.MessageElement.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.MessageElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.MessageElement"/> class.
            </summary>
            <param name="name">Message element name (should be unique).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.MessageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.MessageElement"/> class.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MessageElement.ElementType">
            <summary>
            The type of this message element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MessageElement.RequiredFeatures">
            <summary>
            The features a device will need to render this element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MessageElement.Name">
            <summary>
            A unique name for this message element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MessageElement.ShouldAutoExecute">
            <summary>
            When this flag is set, this command will execute automatically without the user having
            to select or initiate anything.<br/>
            <br/>
            This parameter will be used as the value for the command's "auto" parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MessageElement.DisplayMessage">
            <summary>
            The message that should be displayed to the user after this command is executed.<br/>
            <br/>
            This parameter will be used as the value for the command's "displaymsg" parameter.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MessageElement.SelectableMessage">
            <summary>
            A selectable message that should be displayed to the user before this command is
            executed.<br/>
            <br/>
            When the user selects this message, the command will execute.<br/>
            <br/>
            This parameter will be used as the value for the command's "selmsg" parameter.
            </summary>
            <value></value>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IBrowser">
            <summary>
            Interface definition for a browser element link in a MXit message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IBrowser.Url">
            <summary>
            URL to open if the user selects this element.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Browser.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Browser.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Browser"/> class.
            </summary>
            <param name="name">Message element name (should be unique).</param>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="url">URL to open if the user selects this element.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Browser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Browser"/> class.
            </summary>
            <param name="name">Message element name (should be unique).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Browser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Browser"/> class.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Browser.Url">
            <summary>
            URL to open if the user selects this element.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.CellCoord">
            <summary>
            Co-ordinates of a single data cell within a table.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ICellCoord">
            <summary>
            Interface definition for the co-ordinates of a single data cell within a table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ICellCoord.Col">
            <summary>
            Column of the cell.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ICellCoord.Row">
            <summary>
            Row of the cell.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.CellCoord.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.CellCoord"/> class.
            </summary>
            <param name="row">Row of the cell.</param>
            <param name="col">Column of the cell.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.CellCoord.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.CellCoord.Col">
            <summary>
            Column of the cell.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.CellCoord.Row">
            <summary>
            Row of the cell.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ChatScreenBehaviourType">
            <summary>
            Chat screen behaviours for a MXit client.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.None">
            <summary>
            No special behaviours.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.NoHeading">
            <summary>
            Don’t display a heading or tabs. 
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.FullScreen">
            <summary>
            Full screen mode - no heading, tabs or scroll bar.
            
            The client's chat screen area dimensions are ignored (i.e. the whole screen is used).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.Clear">
            <summary>
            Clear previous messages when a new message is received.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.NoAlert">
            <summary>
            Don’t play an audible alert when a new message is received.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.NoPrefix">
            <summary>
            Don’t display the sender and timestamp of received messages as a message prefix.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.NotifyClientAreaChanged">
            <summary>
            Send a get-chat-screen-information-message whenever the client area's dimensions change.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.ShowProgress">
            <summary>
            Show a progress indicator whenever the client sends a command / link to a service,
            until the service responds. This config will also cause the command / link to NOT be
            echo'd on the client's chat screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.CloseTab">
            <summary>
            Add a close tab option (if tabs are enabled) to the menus.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenBehaviourType.Default">
            <summary>
            A sensible default chat screen configuration for playing games.<br />
            <br />
            This configuration combines the NoHeading, FullScreen, Clear and NoPrefix chat screen behaviours.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ChatScreenConfig">
            <summary>
            Message element to set the behaviour of a MXit client's chat screen, and
            install custom popup menus.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenConfig._behaviour">
            <summary>
            Behaviour of this chat screen (e.g. enable full screen, remove previous messages when
            new messages are received, etc.).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenConfig._popup">
            <summary>
            Popup menu for the chat screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ChatScreenConfig._clientColors">
            <summary>
            Optional background color that overrides the background color of the client chat screen.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ChatScreenConfig.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ChatScreenConfig.#ctor(MXit.Messaging.MessageElements.ChatScreenBehaviourType,System.String,MXit.Messaging.MessageElements.IPopupMenu)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ChatScreenConfig"/> class.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="alert">Text to display in an alert menu (often used in conjunction with the menu field).</param>
            <param name="popup">Popup menu for the chat screen.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ChatScreenConfig.#ctor(MXit.Messaging.MessageElements.ChatScreenBehaviourType,System.String,MXit.Messaging.MessageElements.IPopupMenu,MXit.Messaging.MessageElements.IClientColors)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ChatScreenConfig"/> class.
            </summary>
            <param name="behaviour">Chat screen behaviour.</param>
            <param name="alert">Text to display in an alert menu (often used in conjunction with the menu field).</param>
            <param name="popup">Popup menu for the chat screen.</param>
            <param name="colors">Background color that (overrides the background color of the client chat screen).</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ChatScreenConfig.Behaviour">
            <summary>
            Behaviour of this chat screen (e.g. enable full screen, remove previous messages when
            new messages are received, etc.).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ChatScreenConfig.Popup">
            <summary>
            Gets the popup.
            </summary>
            <value>The popup.</value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ChatScreenConfig.Alert">
            <summary>
            Text to display in an alert menu (often used in conjunction with the menu field).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ChatScreenInfo">
            <summary>
            A message element to retrieve information about the client's chat screen.<br />
            <br />
            The chat screen behaviour, dimensions and background and foreground colors will be returned
            in the reply message (of type ChatScreenInfoReply).
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ChatScreenInfo.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ChatScreenInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ChatScreenInfo"/> class.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ClientColorType">
            <summary>
            Types of colors that can be set on / retrieved from a MXit client.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.Text">
            <summary>
            Chat screen foreground text color.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.MessageSentPrefix">
            <summary>
            Color of the prefix (You:) that is displayed in front of a message that is sent.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.MessageReceivedPrefix">
            <summary>
            Color of the prefix (They:) that is displayed in front of a message that is received.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.InfoMessage">
            <summary>
            Color used to display informational messages e.g. "Contact has gone offline."
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.TimeStampMessage">
            <summary>
            Color of the timestamp of a message.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.Link">
            <summary>
            Text color of a link within the chat screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.LinkSelectedBackground">
            <summary>
            Background color of a selected link within the chat screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.LinkSelectedText">
            <summary>
            Text color of a selected link within the chat screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColorType.Background">
            <summary>
            Chat screen background color.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ICompoundMessageElement">
            <summary>
            A message element that is made up of a collection of <see cref="T:MXit.Messaging.MessageElements.MessageElement"/>s.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ICompoundMessageElement.AppendToMessage(MXit.Messaging.IMessageToSend)">
            <summary>
            Append this compound message element to a message.
            </summary>
            <param name="message">The message to append the element to.</param>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ISelectableImage">
            <summary>
            Interface for SelectableImage
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IInlineImage">
            <summary>
            Interface definition for an inline image element in a MXit message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IInlineImage.FrameWidth">
            <summary>
            Image width on client (in pixels).
            </summary>
            <value>
            The width of the frame.
            </value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IInlineImage.FrameHeight">
            <summary>
            Image height on client (in pixels).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IInlineImage.DeviceDisplayWidth">
            <summary>
            Device display width (in pixels).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IInlineImage.DeviceDisplayHeight">
            <summary>
            Device display height (in pixels).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.MenuItemType">
            <summary>
            Types of popup menu items that can be pushed to a MXit client.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.Unknown">
            <summary>
            Unknown / unspecified popup menu item.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.UserDefined">
            <summary>
            Return the contents of the "returnval" field when this menu item is selected.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.Submit">
            <summary>
            Performs the submit action as if it was a cell with the Submit command.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.Reset">
            <summary>
            Performs the reset action as if it was a cell with the Reset command.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.Write">
            <summary>
            Display the standard write screen (which will allow the user to type a message).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.Camera">
            <summary>
            Display the standard camera screen (which will allow the user to take a photo and send
            it to the service).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.File">
            <summary>
            Display the standard file browser screen (which will allow the user to load a file from
            the filesystem and send it to the service).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MenuItemType.VoiceRecorder">
            <summary>
            Display the standard voice recorder screen (which will allow the user to record a short
            voice message and send it to the service).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.MessageElementType">
            <summary>
            MXit message element types.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.ClearScreen">
            <summary>
            Element to clear the device screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.JumpToReply">
            <summary>
            Element to jump directly to a custom form.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.AutoReply">
            <summary>
            An auto-reply element.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.SendSMS">
            <summary>
            Element to send an SMS message.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.Reply">
            <summary>
            Element that contains a reply message, e.g. links.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.PlatformRequest">
            <summary>
            Element that contains a platform request, e.g. make a phone call, open WAP browser, etc.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.None">
            <summary>
            Unknown element type.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.SelectContact">
            <summary>
            Element to select a contact.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.Image">
            <summary>
            Inline image element.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.SelectableImage">
            <summary>
            Selectable inline image element.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.Emoticon">
            <summary>
            Custom emoticon.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.ChatScreenConfig">
            <summary>
            Chat screen configuration. Allows various options to be set for the chat screen,
            including it's behaviour, the commands that should be available and optionally the text
            for a popup menu.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.ImageStrip">
            <summary>
            A set of images that can be sent to and cached on the client, to be referenced from there on.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.Table">
            <summary>
            Tabular images (and possibly later data).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.ChatScreenInfo">
            <summary>
            Element to retrieve information about the client's chat screen.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.MessageElementType.GetImageStrip">
            <summary>
            Element to get an image strip. Used by the client to retrieve an image strip that it does not have.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.MessageReply">
            <summary>
            A basic mxit command message reply from a client.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.IReply">
            <summary>
            A reply received back from a MXit user's client, to a command that was embedded in a named
            element like a table or a link.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.IReply.Parse">
            <summary>
            This is called to populate the rest of the fields of this class once a Value is set.
            In the case where complex information is passed in the Value property, derive from this
            class and override the parse function to parse the value property and populate the relevant.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.StructuredResponse">
            <summary>
            Whether this is a structured response, i.e. contains command replies.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.Name">
            <summary>
            Named value of this reply.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.Value">
            <summary>
            Text value of the reply object.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.ElementType">
            <summary>
            Type of the element, e.g. reply, clearscreen etc.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.ErrCode">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.ErrMsg">
            <summary>
            Error code's error message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IReply.Type">
            <summary>
            The type of message e.g. chat, image etc.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.MessageReply.Parse">
            <summary>
            For a plain text response like this object, there is nothing to parse out.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.MessageReply.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Replies.MessageReply"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.MessageReply.#ctor(MXit.Messaging.MessageElements.Replies.IReply)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Replies.MessageReply"/> class.
            </summary>
            <param name="reply">Instantiate this classed (and its variables) based on the values of another IReply.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.StructuredResponse">
            <summary>
            Whether this is a structured response, i.e. contains command replies.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.Name">
            <summary>
            Named value of this reply.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.Value">
            <summary>
            Text value of the reply object.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.ElementType">
            <summary>
            The type of message e.g. chat, image etc.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.ErrCode">
            <summary>
            Error code.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.ErrMsg">
            <summary>
            Error code's error message.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.MessageReply.Type">
            <summary>
            The type of message e.g. chat, image etc.
            </summary>
            <value></value>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.IChatScreenInfoReply">
            <summary>
            Represents the reply that is sent as a result of a ChatScreenInfo request. It contains 
            various bits of information about the chat screen.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IChatScreenInfoReply.Behaviour">
            <summary>
            Defines the behaviour of this chat screen, including whether it is full screen or whether
            previous messages should be removed when new messages are received.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IChatScreenInfoReply.Width">
            <summary>
            The width (in pixels) of the addressable area of the chat screen. This could be less than
            the full screen, depending on the area reserved for the skin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IChatScreenInfoReply.Height">
            <summary>
            The height (in pixels) of the addressable area of the chat screen. This could be less than
            the full screen, depending on the area reserved for the skin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IChatScreenInfoReply.Colors">
            <summary>
            Represents client colors.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply._Behaviour">
            <summary>
            Defines the behaviour of this chat screen, including whether it is full screen or whether
            previous messages should be removed when new messages are received.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply._Width">
            <summary>
            The width (in pixels) of the addressable area of the chat screen. This could be less than
            the full screen, depending on the area reserved for the skin.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply._Height">
            <summary>
            The height (in pixels) of the addressable area of the chat screen. This could be less than
            the full screen, depending on the area reserved for the skin.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply._Colors">
            <summary>
            the background color of the chat screen as an RGB value.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply.ParseColor(System.String)">
            <summary>
            Convert an ARGB string to a color object .
            </summary>
            <param name="colorString"> the string which is in format AARRGGBB (in hexadecimal).</param>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply.Parse">
            <summary>
            This is called to populate the rest of the fields of this class once a Value is set.
            In the case where complex information is passed in the Value property, derive from this
            class and override the parse function to parse the value property and populate the relevant.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply.#ctor(MXit.Messaging.MessageElements.Replies.IReply)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Replies.ChatScreenInfoReply"/> class.
            </summary>
            <param name="reply">Instantiate this classed (and its variables) based on the values of another IReply.</param>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ClientColors">
            <summary>
            A list of colors, for user interface elements, within a MXit client.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IClientColors">
            <summary>
            Interface definition of a list of colors, for user interface elements, within a MXit
            client.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IClientColors.Contains(MXit.Messaging.MessageElements.ClientColorType)">
            <summary>
            Returns true if a color type has been set.
            </summary>
            <param name="type">Client color type.</param>
            <returns>True if the client color type has been set to a color, false otherwise.</returns>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IClientColors.Item(MXit.Messaging.MessageElements.ClientColorType)">
            <summary>
            Add a color to / retrieve a color from the list of client colors.
            </summary>
            <param name="type">Client color type.</param>
            <returns>Color associated with the client color type.</returns>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ClientColors._colors">
            <summary>
            Client color dictionary.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ClientColors.Contains(MXit.Messaging.MessageElements.ClientColorType)">
            <summary>
            Test if there is a color associated with a given color type.
            </summary>
            <param name="type">Client color type.</param>
            <returns>True if a color is set for the given color type.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ClientColors.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ClientColors.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ClientColors"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ClientColors.#ctor(MXit.Messaging.MessageElements.ClientColorType,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ClientColors"/> class.
            </summary>
            <param name="type">Client color type (for the first type in the list).</param>
            <param name="color">Color to associate with the type (for the first type in the list).</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ClientColors.Item(MXit.Messaging.MessageElements.ClientColorType)">
            <summary>
            Add / retrieve a color to / from the list of client colors.
            </summary>
            <param name="type">Client color type to add / retrieve.</param>
            <returns>Color of the client color type.</returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ClearScreen">
            <summary>
            Used to clear some data on the client side.
            </summary>
            <remarks>
            selmsg  - the selectable message that must be displayed to the user
            </remarks>
            <example>
            Request:
                ::op=cmd|type=clear|clearmsgscreen=true|auto=true|id=1136011250:
                
            Reply:
                type=clear|err=0      
            </example>
            <exclude />
        </member>
        <member name="M:MXit.Messaging.MessageElements.ClearScreen.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ClearScreen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ClearScreen"/> class.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Column">
            <summary>
            A single column in a table.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IColumn">
            <summary>
            Interface definition for a single column in a table.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IColumn.Set(System.Int32)">
            <summary>
            Set the column width as a number of pixels.
            </summary>
            <param name="width">Column width as a number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IColumn.Set(System.Single)">
            <summary>
            Set the column width as a percentage.
            </summary>
            <param name="width">Column width as a percentage.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IColumn.Set(System.Int32,MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Set the column style, and width as a number of pixels.
            </summary>
            <param name="width">Column width as a number of pixels.</param>
            <param name="style">Column style.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IColumn.Set(System.Single,MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Set the column style, and width as a percentage.
            </summary>
            <param name="width">Column width as a percentage.</param>
            <param name="style">Column style.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IColumn.Width">
            <summary>
            Column width.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IColumn.Style">
            <summary>
            Column style (shared by all elements in the column).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Column._table">
            <summary>
            Table this column belongs to.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Column.Set(System.Int32)">
            <summary>
            Set the column width as a number of pixels.
            </summary>
            <param name="width">Column width as a number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Column.Set(System.Single)">
            <summary>
            Set the column width as a percentage.
            </summary>
            <param name="width">Column width as a percentage.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Column.Set(System.Int32,MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Set the column style, and width as a number of pixels.
            </summary>
            <param name="width">Column width as a number of pixels.</param>
            <param name="style">Column style.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Column.Set(System.Single,MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Set the column style, and width as a percentage.
            </summary>
            <param name="width">Column width as a percentage.</param>
            <param name="style">Column style.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Column.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element, and
            set this object's dirty flag to false.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Column.#ctor(MXit.Messaging.MessageElements.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Column"/> class.
            </summary>
            <param name="table">Table this column belongs to.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Column.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Column.Width">
            <summary>
            Column width.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Column.Style">
            <summary>
            Column style (shared by all elements in the column).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.CommandFieldText">
            <summary>
            Provides methods to encode/decode MXit message command text.
            </summary>
            <exclude />
        </member>
        <member name="M:MXit.Messaging.MessageElements.CommandFieldText.Encode(System.String)">
            <summary>
            Encode a MXit command's raw field text.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Encoded text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.CommandFieldText.Decode(System.String)">
            <summary>
            Decode a MXit command's encoded field text.
            </summary>
            <param name="text">Text to decode.</param>
            <returns>Decoded text.</returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.CommandReplyBase">
            <summary>
            The basic reply received from a client.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.ICommandReplyBase">
            <summary>
            The basic response to a command, e.g. a response to a table or structured (named) link.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.ICommandReplyBase.Replies">
            <summary>
            Gets or sets the replies.
            </summary>
            <value>The replies.</value>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.CommandReplyBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Replies.CommandReplyBase"/> class.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.CommandReplyBase.Replies">
            <summary>
            List of replies contained in the response.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.CommandReplyBase.From">
            <summary>
            UserId (or app name) of the message sender.
            The UserId of the MXit user, or app name (i.e. service or bot name) from whom the message
            was/will be sent.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.CommandReplyBase.To">
            <summary>
            UserId (or app name) of the message recipient.
            The UserId of the MXit user, or app name (i.e. service or bot name) to whom the message
            was/will be sent.
            </summary>
            <value></value>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.CommandReplyBase.Body">
            <summary>
            The text body of the message
            </summary>
            <value></value>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Contact">
            <summary>
            A contact that was selected by a "selc" (select cell) command.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IContact">
            <summary>
            Interface definition for a contact that was selected by a "selc" (select cell) command.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IContact.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IContact.Alias">
            <summary>
            
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IContact.Address">
            <summary>
            
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.IContactsReply">
            <summary>
            When a list of contacts is selected from a "selc" command isseud to the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IContactsReply.Contacts">
            <summary>
            Gets the contacts selected.
            </summary>
            <value>The contacts selected.</value>
        </member>
        <member name="T:MXit.Messaging.MessageElements.CustomEmoticon">
            <summary>
            Custom emoticon message element.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.CustomEmoticon.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.CustomEmoticon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.CustomEmoticon"/> class.
            </summary>
            <param name="id">Custom emoticon ID.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.CustomEmoticon.Id">
            <summary>
            Custom emoticon ID.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.FrameType">
            <summary>
            Frame types.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.FrameType.Normal">
            <summary>
            Normal frame (associated with an image).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.FrameType.Clear">
            <summary>
            Clear frame (frame contents should be cleared).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.FrameType.Selected">
            <summary>
            Selected frame.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Frame">
            <summary>
            A single frame in a frameset.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IFrame">
            <summary>
            Interface definition for a single frame in a frameset.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IFrame.ImageStrip">
            <summary>
            The image strip associated with this frame.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IFrame.Index">
            <summary>
            Index (in the frame set) of this frame.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IFrame.Tag">
            <summary>
            An arbitrary object that can be attached to this object.<br />
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Frame.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element, and
            set this object's dirty flag to false.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Frame.Equals(System.Object)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="obj">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Frame.Equals(MXit.Messaging.MessageElements.Frame)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="frame">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Frame.GetHashCode">
            <summary>
            Generate a hash code for this object.
            </summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Frame.#ctor(MXit.Messaging.MessageElements.IImageStripReference,MXit.Messaging.MessageElements.FrameType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Frame"/> class.
            </summary>
            <param name="imageSet">Image strip associated with this frame.</param>
            <param name="type">Frame type.</param>
            <param name="idx">Index (in the frame set) of this frame.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Frame.#ctor(MXit.Messaging.MessageElements.IImageStripReference,MXit.Messaging.MessageElements.FrameType)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Frame"/> class.
            </summary>
            <param name="imageSet">Image strip associated with this frame.</param>
            <param name="type">Frame type.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Frame.ImageStrip">
            <summary>
            Image strip associated with this frame.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Frame.Index">
            <summary>
            Index (in the frame set) of this frame.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Frame.Type">
            <summary>
            Frame type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Frame.Tag">
            <summary>
            An arbitrary object that can be attached to this object.  
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.FrameSet">
            <summary>
            A layered set of frames, to cover a single cell.<br />
            <br />
            A frameset is basically an ordered set of frames, sorted by the layer of the associated
            image strips.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IFrameSet">
            <summary>
            Interface definition for a layered set of frames, to cover a single cell.<br />
            <br />
            A frameset is basically an ordered set of frames, sorted by the layer of the associated
            image strips.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.Set(MXit.Messaging.MessageElements.IImageStripReference,System.Int32)">
            <summary>
            Add a frame within this frameset.
            </summary>
            <param name="strip">Image strip associated with the frame.</param>
            <param name="idx">0-based index of the frame in the framese. </param>
            <returns>The frame objec.t</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.Add(MXit.Messaging.MessageElements.IImageStripReference,System.Int32)">
            <summary>
            Add a frame within this frameset.
            </summary>
            <param name="strip">Image strip associated with the frame.</param>
            <param name="idx">0-based index of the frame in the frameset.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.SetClear(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, means that the other frames in
            the same frameset should not be drawn. 
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.AddClear(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, means that the other frames in
            the same frameset should not be drawn. 
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame objec.t</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.SetSelected(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, refers to the currently
            selected frame (from the same frameset). This only makes sense to be included in a
            "place" action.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.AddSelected(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, refers to the currently
            selected frame (from the same frameset). This only makes sense to be included in a
            "place" action.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.Get(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            Retrieve a specific frame using the image strip (and thus the layer) of the frame.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame to retrieve.</param>
            <returns>Frame for the appropriate image strip (i.e. layer) within the frameset, or NULL if there is no frame in that layer.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.Remove(MXit.Messaging.MessageElements.IFrame)">
            <summary>
            Remove a specific frame from the frameset.
            </summary>
            <param name="frame">Frame to remove.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IFrameSet.Clear">
            <summary>
            Remove all the frames from this frameset.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IFrameSet.Count">
            <summary>
            Returns the number of frames in this frameset.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IFrameSet.Item(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            Array indexer for retrieving or setting a frame in the frame set, using the image strip
            (and therefore ultimately the layer) as index.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame to retrieve.</param>
            <returns>Frame for the appropriate image strip (i.e. layer) within the frameset, or NULL if there is no frame in that layer.</returns>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IFrameSet.Tag">
            <summary>
            An arbitrary object that can be attached to this object.
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Set(MXit.Messaging.MessageElements.IImageStripReference,System.Int32)">
            <summary>
            Add a frame within this frameset.
            </summary>
            <param name="strip">Image strip associated with the frame.</param>
            <param name="idx">0-based index of the frame in the frameset.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Add(MXit.Messaging.MessageElements.IImageStripReference,System.Int32)">
            <summary>
            Add a frame within this frameset.
            </summary>
            <param name="strip">Image strip associated with the frame.</param>
            <param name="idx">0-based index of the frame in the frameset.</param>
            <returns>The frame objec.t</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.SetClear(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, means that the other frames in
            the same frameset should not be drawn. 
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.AddClear(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, means that the other frames in
            the same frameset should not be drawn. 
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.SetSelected(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, refers to the currently
            selected frame (from the same frameset). This only makes sense to be included in a
            "place" action.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.AddSelected(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            A special frame that, when included in a list of frames, refers to the currently
            selected frame (from the same frameset). This only makes sense to be included in a
            "place" action.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame.</param>
            <returns>The frame object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Get(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            Retrieve a specific frame using the image strip (and thus the layer) of the frame.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame to retrieve.</param>
            <returns>Frame for the appropriate image strip (i.e. layer) within the frameset, or NULL if there is no frame in that layer.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.CompareFrames(MXit.Messaging.MessageElements.IFrame,MXit.Messaging.MessageElements.IFrame)">
            <summary>
            Compare two frames
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Add(MXit.Messaging.MessageElements.IImageStripReference,MXit.Messaging.MessageElements.FrameType,System.Int32)">
            <summary>
            Represents a single frame with a frame set. 
            </summary>
            <param name="strip"> the frame set this frame refers to.</param>
            <param name="type"> the frame type.</param>
            <param name="idx"> 0 based index in the frame set.</param>
            <returns> an object representing the frame.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Add(MXit.Messaging.MessageElements.IImageStripReference,MXit.Messaging.MessageElements.FrameType)">
            <summary>
            Represents a single frame with a frame set. 
            </summary>
            <param name="strip"> the frame set this frame refers to.</param>
            <param name="type">frame type.</param>
            <returns> an object representing the frame.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Remove(MXit.Messaging.MessageElements.IFrame)">
            <summary>
            Remove a specific frame from the frameset.
            </summary>
            <param name="frame">Frame to remove.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Clear">
            <summary>
            Remove all the frames from this frameset.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.FrameSet.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element, and
            set this object's dirty flag to false.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="P:MXit.Messaging.MessageElements.FrameSet.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.FrameSet.Tag">
            <summary>
            An arbitrary object that can be attached to this object.<br />
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.FrameSet.Count">
            <summary>
            Returns the number of frames in this frameset.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.FrameSet.Item(MXit.Messaging.MessageElements.IImageStripReference)">
            <summary>
            Array indexer for retrieving or setting a frame in the frame set, using the image strip
            (and therefore ultimately the layer) as index.
            </summary>
            <param name="strip">Image strip (i.e. layer) of the frame to retrieve.</param>
            <returns>Frame for the appropriate image strip (i.e. layer) within the frameset, or NULL if there is no frame in that layer.</returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.IGetImageStripReply">
            <summary>
            Wraps the message that is sent by the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.IGetImageStripReply.Validator">
            <summary>
            Id that is sent with image strip when it was sent to client the first time and is then
            returned by client with this call so that service can determine whether fill image strip
            should be sent again, or whether the client indeed has the latest copy.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.GetImageStripReply.#ctor(MXit.Messaging.MessageElements.Replies.IReply)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Replies.GetImageStripReply"/> class.
            </summary>
            <param name="reply">Instantiate this classed (and its variables) based on the values of another IReply.</param>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IImageStripReference">
            <summary>
            Interface definition for a reference to an image strip, for which the image data is stored
            remotely.<br />
            <br />
            An image strip is an image that is logically broken up into a set of smaller images, or
            frames, that are all of equal size.<br />
            <br />
            When an app sends an image strip to a MXit client, the client will cache the strip, so that
            the frames within the image strip can then referenced, without having to transfer the image
            data each time.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IImageStripReference.FrameWidth">
            <summary>
            Width of a single frame in the strip.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IImageStripReference.FrameHeight">
            <summary>
            Height of a single frame in the strip.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IImageStripReference.Layer">
            <summary>
            The layer number is used to order multiple image strips for the same set of table cells.<br />
            <br />
            If multiple image strips are used to draw the data in the cells, the images are drawn
            in order of increasing layer numbers.<br />
            <br />
            A layer of 0 would typically be the background, 1 the foreground and 2 the "selected" look.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IImageStripReference.FrameCount">
            <summary>
            Number of frames in the strip.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IImageStripReference.Validator">
            <summary>
            A unique ID, sent to the client, that the client can use to request image strips it
            does not yet have.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IMargin">
            <summary>
            Interface definition of a margin around a table. 
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IMargin.Set(System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of pixels.
            </summary>
            <param name="value">Number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IMargin.SetPoints(System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of device independent points.
            </summary>
            <param name="value">Number of points.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IMargin.Set(System.Int32,System.Int32)">
            <summary>
            Set the thickness of the horizontal and vertical edges of the margin as a number of
            pixels.
            </summary>
            <param name="horiz">Thickness of top-and-bottom margins as a number of pixels.</param>
            <param name="vert">Thickness of left-and-right margins as a number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IMargin.SetPoints(System.Int32,System.Int32)">
            <summary>
            Set the thickness of the horizontal and vertical edges of the margin as a number of
            device independent points.
            </summary>
            <param name="horiz">Thickness of top-and-bottom margins as a number of device independent points.</param>
            <param name="vert">Thickness of left-and-right margins as a number of device independent points.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IMargin.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of pixels.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IMargin.SetPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of device independent points.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMargin.Top">
            <summary>
            Thickness of the top-margin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMargin.Right">
            <summary>
            Thickness of the right-margin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMargin.Bottom">
            <summary>
            Thickness of the bottom-margin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMargin.Left">
            <summary>
            Thickness of the left-margin.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IMenuItem">
            <summary>
            Interface definition for a popup menu item on a MXit client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMenuItem.Type">
            <summary>
            Type of this menu item.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMenuItem.Text">
            <summary>
            Text for this menu item (that will be displayed to the user).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMenuItem.Name">
            <summary>
            Name to uniquely identify this menu item.<br />
            <br />
            This is also the string that will be returned when the menu item is selected, if the
            menu item's type is UserDefined. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IMenuItem.Meta">
            <summary>
            Extra meta data that is sent to the client and can be used for further processing.<br />
            <br />
            In the case of Submit and Reset menu item types, this field should contain the name of the
            relevant table. NB: The table has to be defined.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.InlineImage">
            <summary>
            Allow images to be displayed as part of the normal text in the conversation screen. This 
            is intended for small images e.g. thumbnails. This feature also includes redoing the 
            internal representation of objects in the conversation screen.
            
            src     - OPTIONAL  - The full url from where the image must be downloaded 
            sid     - OPTIONAL  - The store id that identifies this image uniquely within the user's store
                                  Must be in the users folder list.
                                  This is used with a multimedia (27) get file (8) call
            dat     - OPTIONAL  - The base64 encoded image data
                                  If included the image data is part of the message
            crc     - OPTIONAL  - The crc of an image, if present it MUST be the 
                                  CRC of an image that is part of this message. 
            algn    - OPTIONAL  - How the image should be aligned. 
                                    Possible values are:
                                        0x1 - left
                                        0x2 - middle
                                        0x4 - right
            flow    - OPTIONAL  - How text flows around the image
                                    Possible values are:
                                        1 - inline with text (hight is adjusted as needed)
                                        2 - wrap around image (must be left or right aligned)
                                        3 - alone on line (no text wrapping around image)
                                        w - width of image (in pixels)
                                        h - height of image (in pixels)
            xo      - OPTIONAL  - x offset of image (within w x h area in which it is drawn)
            yo      - OPTIONAL  - y offset of image (within w x h area in which it is drawn)
            fw      - OPTIONAL  - horisontal size of image frame
            fh      - OPTIONAL  - vertical size of image frame
            t       - OPTIONAL  - the time between each frame
            cap     - OPTIONAL  - true/false - default true
                                    If set to false, the client should NOT attach capability information 
                                    when performing an HTTP GET operation to retrieve an image. 
                                    This option is only relevant if the src option is used. 
            replymsg - OPTIONAL - Text that is added to the message screen 
                                  (as if the user sent the message himself) when the image is selected.
                                  If present, then a selection rectangle is also drawn around the image
                                  when it receives the focus.
            </summary>
            <example>
            Request:
                op=img|dat=ASDF23408asdflkj2309flkjsadf%3d%3d|algn=left|w=120|h=12|t=100|replymsg=blah
            </example>
            <exclude />
        </member>
        <member name="F:MXit.Messaging.MessageElements.InlineImage._alignment">
            <summary>
            Image alignment.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.InlineImage._flow">
            <summary>
            Text flow.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.InlineImage._image">
            <summary>
            Internal system image.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.InlineImage.DeviceScalePercentage">
            <summary>
            Percentage of the device's display width that the image should consume. 
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.InlineImage._useActualImageSize">
            <summary>
            If set, this overrides any display width/height setting and/or scaling and forces use of the actual
            image size instead.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.InlineImage.ReplyMsg">
            <summary>
            Text that is added to the message screen (as if the user sent the message himself)
            when the image is selected. If present, then a selection rectangle is also drawn
            around the image when it receives the focus.
            </summary>        
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            Create an inline image element from raw image data, scaled to a specified width and
            height.
            <remarks>
            If you both frameWidth and frameHeight are set to 0, the image will be scaled to 25%
            of the viewing device's screen size.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from raw image data, scaled to a percentage of the
            device's display width.
            <remarks>
            If percentageOfDeviceFrameWidth is set to 0, the image's
            actual size will be used and no resizing will occur.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="sendCapabilities">If set to <c>true</c>, the client will also send it's capabilities when doing
            an HTTP GET to retrieve the image. NB: Some websites don't support this feature and it may break
            image fetching.</param>
            Create an inline image element from a URL, scaled to a percentage of the device's display width.
            <remarks>
            If percentageOfDeviceFrameWidth is set to 0, the image's
            actual size will be used and no resizing will occur.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="sendCapabilities">If set to <c>true</c>, the client will also send it's capabilities when doing
            an HTTP GET to retrieve the image. NB: Some websites don't support this feature and it may break
            image fetching.</param>
            <param name="useActualImageSize">If set to <c>true</c>, this overrides any display width/height setting and/or scaling
            and forces use of the actual image size instead.</param>
            <remarks>
            If you both frameWidth and frameHeight are set to 0, the image will be scaled to 25%
            of the viewing device's screen size.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            Create an inline image element from a system bitmap object, scaled to a specified width
            and height.
            <remarks>
            If you both frameWidth and frameHeight are set to 0, the image will be scaled to 25%
            of the viewing device's screen size.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from a system bitmap object, scaled to a percentage of
            the device's display width.
            <remarks>
            If percentageOfDeviceFrameWidth is set to 0, the image's
            actual size will be used and no resizing will occur.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Int64,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            Create an inline image element from a MXit filestore image ID, scaled to a specified
            width and height.
            <remarks>
            If you both frameWidth and frameHeight are set to 0, the image will be scaled to 25%
            of the viewing device's screen size.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            Create an inline image element from an IImage, scaled to a specified width and height.
            <remarks>
            If you both frameWidth and frameHeight are set to 0, the image will be scaled to 25%
            of the viewing device's screen size.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from an IImage, scaled to a percentage of the device's
            display width.
            <remarks>
            If percentageOfDeviceFrameWidth is set to 0, the image's
            actual size will be used and no resizing will occur.
            </remarks>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            Create an inline image element from a URL, using the image's actual image size.
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.String,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.String,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Int64,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Int64,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            Create an inline image element from raw image data, using the image's actual image
            size.
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[],MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="image">Raw image.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap)">
            <summary>
            Constructor.
            </summary>
            <param name="image">Raw image.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceFrameWidth">Image width as percentage of the device's display width.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.InlineImage.#ctor(MXit.Messaging.Data.IImage,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.InlineImage"/> class.
            </summary>
            <param name="image">Raw image.</param>
            <param name="frameWidth">Image width on client (in pixels).</param>
            <param name="frameHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.InlineImage.FrameWidth">
            <summary>
            Image width on client (in pixels).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.InlineImage.FrameHeight">
            <summary>
            Image height on client (in pixels).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.InlineImage.DeviceDisplayWidth">
            <summary>
            Device display width (in pixels).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.InlineImage.DeviceDisplayHeight">
            <summary>
            Device display height (in pixels).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IPopupMenu">
            <summary>
            Interface definition for a popup menu, to override the default menu on a MXit client.<br />
            Popup menu's are assigned to the ChatScreenConfig element in a message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IPopupMenu.Add(MXit.Messaging.MessageElements.MenuItemType,System.String,System.String)">
            <summary>
            Add a new popup menu item.
            </summary>
            <param name="type">Type of the menu item.</param>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">
            Unique name for the menu item.<br />
            <br />
            This text will be sent back by the MXit client, if the user selects the menu item.
            </param>
            <returns>The menu item that was just added to the menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IPopupMenu.AddSubmit(System.String,System.String,MXit.Messaging.MessageElements.ITable)">
            <summary>
            Add a "submit" popup menu item.<br />
            <br />
            When the user selects a "submit" menu item, the MXit client will send back the current
            table selections that are active on the chat screen.
            </summary>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">Unique name for the menu item.</param>
            <param name="table">Table element that this menu item should be linked to.</param>
            <returns>The menu item that was just added to the menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IPopupMenu.AddReset(System.String,System.String,MXit.Messaging.MessageElements.ITable)">
            <summary>
            Add a "reset" popup menu item.
            </summary>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">Unique name for the menu item.</param>
            <param name="table">Table element that this menu item should be linked to.</param>
            <returns>The menu item that was just added to the menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IPopupMenu.AddWrite">
            <summary>
            Add a menu item to open the standard write screen for the user to enter text.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IPopupMenu.Clear">
            <summary>
            Remove all menu items from this popup menu.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IRow">
            <summary>
            Interface definition for a single row in a table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IRow.Style">
            <summary>
            Row style (shared by all elements in this row).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ITable">
            <summary>
            Interface definition for a table that can be used to organise and display images from
            framesets.<br />
            <br />
            A table is a rectangular grid containing a number of cells. Each data cell may refer to
            multiple framesets, which are drawn according to the drawing layer of each frameset.<br />
            <br />
            This strategy allows one to stack images.<br />
            <br />
            A data cell may also contain an operation (an action to take if that cell is selected).<br />
            <br />
            A table is sized according to the images in its data cells.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.InsertCol(System.Int32)">
            <summary>
            Insert a column at a specified index in the table.<br />
            <br />
            If the index is out of range, the column is insert either at the beginning, or end of
            the table (depending on which side the index is out of range).<br />
            <br />
            After the column is created, the data cell objects for the column are also created.
            </summary>
            <param name="idx">0-based index where the new column should be inserted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.AddCol">
            <summary>
            Append a column to the end of the table.<br />
            <br />
            After the column is created, the data cell objects for the column are also created.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.DeleteCol(System.Int32)">
            <summary>
            Delete a column at a specified index in the table.
            </summary>
            <param name="idx">0-based index of the column that should be deleted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.Col(System.Int32)">
            <summary>
            Retreive a column from the table.
            </summary>
            <param name="idx">0-based index of the column to retrieve.</param>
            <returns>A column from the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.Row(System.Int32)">
            <summary>
            Retreive a row from the table.
            </summary>
            <param name="idx">0-based index of the row to retrieve.</param>
            <returns>A row from the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.InsertRow(System.Int32)">
            <summary>
            Insert a row at a specified index in the table.<br />
            <br />
            If the index is out of range, the row is insert either at the beginning, or end of
            the table (depending on which side the index is out of range).<br />
            <br />
            After the row is created, the data cell objects for the row are also created.
            </summary>
            <param name="idx">0-based index where the new row should be inserted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.AddRow">
            <summary>
            Append a row to the end of the table.<br />
            <br />
            After the row is created, the data cell objects for the row are also created.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.DeleteRow(System.Int32)">
            <summary>
            Delete a row at a specified index in the table.
            </summary>
            <param name="idx">0-based index of the row that should be deleted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.CreateStyle">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.CreateStyle(MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="style">Table style.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.CreateStyle(MXit.Messaging.AlignmentType)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.CreateStyle(MXit.Messaging.AlignmentType,System.Drawing.Color)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <param name="borderCol">Cell border color.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.CreateStyle(MXit.Messaging.AlignmentType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <param name="borderCol">Cell border color.</param>
            <param name="background">Cell background color.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.CreateStyle(MXit.Messaging.AlignmentType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <param name="borderCol">Cell border color.</param>
            <param name="background">Cell background color.</param>
            <param name="color">Cell text color.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.SetClassicStyle(System.Drawing.Color)">
            <summary>
            A table with lines between all the rows and columns.
            </summary>
            <param name="border">Cell border color.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.SetClassicNoFrameStyle(System.Drawing.Color)">
            <summary>
            A table with lines between all the rows and columns, but without a surrounding frame.
            </summary>
            <param name="border">Cell border color.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.SetZebraStyle(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            A table with alternating light and dark rows, with a border between each row and cell,
            and a thicker line between the first row (heading) and the rest of the table.
            </summary>
            <param name="color">Cell text color.</param>
            <param name="border">Cell border color.</param>
            <param name="firstRow">Color of the first row.</param>
            <param name="secondRow">Color of the second row.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ITable.SetZebraWithHeadingStyle(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            A table consisting of alternating light and dark rows, without a border between each row
            and cell. The whole table is surrounded with a border and there is a single line between the
            heading and the body.
            </summary>
            <param name="border">Cell border color.</param>
            <param name="heading">Background color of the heading.</param>
            <param name="headingShadow">Color of the line between the heading and the table body.</param>
            <param name="firstRow">Color of the first row.</param>
            <param name="secondRow">Color of the second row.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.ToDevice">
            <summary>
            The device of the user to whom this table will be sent.<br />
            <br />
            The recipient user's device is needed to construct markup when rich text is
            added to the table's data cells.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.RowCount">
            <summary>
            Total number of rows in the table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.ColCount">
            <summary>
             Total number of columns in the table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.Width">
            <summary>
            Width of the table. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.Flow">
            <summary>
            Text-flow of the table (how text should flow around the table).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.Mode">
            <summary>
            Table transfer mode.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.DefaultSelection">
            <summary>
            Default selection of framesets for this table.<br />
            <br />
            The default selection is useful for cases where all items are not placed on the table
            right from the start.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.SelectionRect">
            <summary>
            Coordinates of the selection rectangle.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.SelectionFrames">
            <summary>
            Frameset that should be used to draw the selection rectangle.<br />
            <br />
            By default, the selection rectangle is rendered by the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.SelectionMode">
            <summary>
            Appearance of selection rectangle that don't have an action of "None".
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.Style">
            <summary>
            Table style.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.HasMarkup">
            <summary>
            Flag to indicate if this table contains MXit markup.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.Item(System.Int32,System.Int32)">
            <summary>
            Array indexer to retrieve a data cell from the table.  For example [2,6] means 3rd row and 7th column.  [0, 0] is the top left cell.
            </summary>
            <param name="row">Table row (0-based index).</param>
            <param name="col">Table column (0-based index).</param>
            <returns>Data cell at the specified row and column.</returns>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.ActionCreator">
            <summary>
            Factory method to create the set of actions that can be associated with cells in this
            table.<br />
            <br />
            The references returned by this function should be assigned to the relevant data cell,
            if that action should be performed by the cell.<br />
            <br />
            Do NOT create duplicate actions as the whole action list need be send to the client
            if a change was made or the table send mode type is replace - Reuse the Actions.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITable.Tag">
            <summary>
            An arbitrary object that can be attached to this table.
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ITableData">
            <summary>
            Interface definition for a single cell in a table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITableData.Frames">
            <summary>
            Frameset for this cell (layered set of images).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITableData.Action">
            <summary>
            The action to perform when this cell is selected.<br />
            <br />
            To create an action, use the CreateAction method of the table this cell belongs to.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITableData.Tag">
            <summary>
            An arbitrary object that can be attached to this cell.<br />
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITableData.Content">
            <summary>
            Rich text content for the cell.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ITableData.Style">
            <summary>
            Cell style.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Replies.ITableReply">
            <summary>
            A reply that is sent back to the app a user is interacting with, when the user performs a
            submit action on a table element. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.ITableReply.Selected">
            <summary>
            The coordinates of all the data cells in the table that were selected by the user, in
            the order that they were selected.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Replies.ITableReply.Placed">
            <summary>
            The coordinates of all the data cells in the table where the user performed a place
            operation, in the order that the placements were made.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.IThickness">
            <summary>
            Interface definition for a device independent thickness.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IThickness.Set(System.Int32)">
            <summary>
            Set the thickness as a number of pixels.
            </summary>
            <param name="value">Number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IThickness.SetPercentage(System.Double)">
            <summary>
            Set the thickness as a percentage.
            </summary>
            <param name="value">Percentage.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IThickness.SetPoints(System.Int32)">
            <summary>
            Set the thickness as a number of device independent points.
            </summary>
            <param name="value">Number of points.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IThickness.SetClientDecides">
            <summary>
            Let the client decide what the thickness should be.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.IThickness.SetContentLock">
            <summary>
            Let the client decide what the thicknes should be, based on the contents of the cell.<br />
            <br />
            When using this option, the containing rectangle will have no influence on the
            thickness.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IThickness.Type">
            <summary>
            Type to specify how the thickness value should be interpreted.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.IThickness.Value">
            <summary>
            Thickness value (can be pixels, a percentage, etc., depending on the thickness type).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Link">
            <summary>
            Shows a selectable link to the user and return the data specified
            in the 'msg' parameter when selected in the 'res' field.
            </summary>
            <remarks>
            selmsg      - the selectable message that must be displayed to the user
            replymsg    - OPTIONAL - Text that is added to the message screen 
                                     (as if the user sent the message himself) when 
                                     the command has been performed successfully. This text
                                     is also sent back in the 'res' field.
            </remarks>
            <example>
            Request:
                op=cmd|type=reply|nm=AS12f|replymsg=back|selmsg=b). The news
                
            Reply:
                type=reply|nm=AS12f|res=back|err=0
            </example>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Link.Encode">
            <summary>
            Encode the message element, i.e. create the underlying message body text for the
            message element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Link.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Link"/> class.
            </summary>
            <param name="name">Message element name (should be unique).</param>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="displayMessage">Message to display to the user after he selects the link.</param>
            <param name="replyMessage">Return text sent back if the user selects the link.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Link.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Link"/> class.
            </summary>
            <param name="selectableMessage">Selectable message to display to the user.</param>
            <param name="replyMessage">Return text to send back when the user selects the link.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Link.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Link"/> class.
            </summary>
            <param name="selectableMessage">Selectable message to display to the user.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Link.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Link"/> class.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Link.ReplyMessage">
            <summary>
            Text that is added to the message screen (as if the user sent the message himself) when 
            the command has been performed successfully. This text is also sent back in the 'res'
            field.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Margin">
            <summary>
            Represents a margin around a table.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.Set(System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of pixels.
            </summary>
            <param name="value">Number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.SetPoints(System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of device independent points.
            </summary>
            <param name="value">Number of points.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.Set(System.Int32,System.Int32)">
            <summary>
            Set the thickness of the horizontal and vertical edges of the margin as a number of
            pixels.
            </summary>
            <param name="horiz">Thickness of top-and-bottom margins as a number of pixels.</param>
            <param name="vert">Thickness of left-and-right margins as a number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.SetPoints(System.Int32,System.Int32)">
            <summary>
            Set the thickness of the horizontal and vertical edges of the margin as a number of
            device independent points.
            </summary>
            <param name="horiz">Thickness of top-and-bottom margins as a number of device independent points.</param>
            <param name="vert">Thickness of left-and-right margins as a number of device independent points.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of pixels.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.SetPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the thickness of all sides of the margin as a number of device independent points.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.IsEmpty">
            <summary>
            A margin is empty if all the thickness of all the margin's sides are 0.
            </summary>
            <returns>True if the margin is empty.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.Equals(System.Object)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="obj">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.Equals(MXit.Messaging.MessageElements.Margin)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="margin">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.GetHashCode">
            <summary>
            Generate a hash code for this object.
            </summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Margin"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Margin.#ctor(MXit.Messaging.MessageElements.IMargin)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Margin"/> class.
            </summary>
            <param name="margin">Object to copy.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Margin.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Margin.Top">
            <summary>
            Thickness of the top-margin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Margin.Right">
            <summary>
            Thickness of the right-margin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Margin.Bottom">
            <summary>
            Thickness of the bottom-margin.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Margin.Left">
            <summary>
            Thickness of the left-margin.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.MenuItem">
            <summary>
            Represents a single menu item that can form part of the chat screen's popup menu.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.MenuItem.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.MenuItem.#ctor(MXit.Messaging.MessageElements.MenuItemType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.MenuItem"/> class.
            </summary>
            <param name="type">Type of the menu item.</param>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">Unique name for the menu item.
            This text will be sent back by the MXit client, if the user selects the menu item.</param>
            <param name="meta">Extra meta data that is sent to the client and can be used for further processing.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MenuItem.Type">
            <summary>
            Type of this menu item.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MenuItem.Text">
            <summary>
            Text for this menu item (that will be displayed to the user).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MenuItem.Name">
            <summary>
            Name to uniquely identify this menu item.<br />
            <br />
            This is also the string that will be returned when the menu item is selected, if the
            menu item's type is UserDefined. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.MenuItem.Meta">
            <summary>
            Extra meta data that is sent to the client and can be used for further processing.<br />
            <br />
            In the case of Submit and Reset menu item types, this field should contain the name of the
            relevant table. NB: The table has to be defined.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.PopupMenu">
            <summary>
            A popup menu, to override the default menu on a MXit client.<br />
            Popup menu's are assigned to the ChatScreenConfig element in a message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.Add(MXit.Messaging.MessageElements.MenuItemType,System.String,System.String)">
            <summary>
            Add a new popup menu item.
            </summary>
            <param name="type">Type of the menu item.</param>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">
            Unique name for the menu item.
            
            This text will be sent back by the MXit client, if the user selects the menu item.
            </param>
            <returns>The menu item that was just added to the menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.AddSubmit(System.String,System.String,MXit.Messaging.MessageElements.ITable)">
            <summary>
            Add a "submit" popup menu item.<br />
            <br />
            When the user selects a "submit" menu item, the MXit client will send back the current
            table selections that are active on the chat screen.
            </summary>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">Unique name for the menu item.</param>
            <param name="table">Table element that this menu item should be linked to.</param>
            <returns>The menu item that was just added to the menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.AddReset(System.String,System.String,MXit.Messaging.MessageElements.ITable)">
            <summary>
            Add a "reset" popup menu item.
            </summary>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">Unique name for the menu item.</param>
            <param name="table">Table element that this menu item should be linked to.</param>
            <returns>The menu item that was just added to the menu.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.AddWrite">
            <summary>
            Add a menu item to open the standard write screen for the user to enter text.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.Add(MXit.Messaging.MessageElements.MenuItemType,System.String,System.String,System.String)">
            <summary>
            Helper method to add a menu item.
            </summary>
            <param name="type">Type of the menu item.</param>
            <param name="text">Menu item text (to display to the user).</param>
            <param name="name">
            Unique name for the menu item.<br />
            <br />
            This text will be sent back by the MXit client, if the user selects the menu item.
            </param>
            <param name="meta">Extra meta data that is sent to the client and can be used for further processing.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.Clear">
            <summary>
            Remove all menu items from this popup menu.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.PopupMenu.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Row">
            <summary>
            A row in a table.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Row._table">
            <summary>
            Table this row belongs to.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Row.#ctor(MXit.Messaging.MessageElements.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Row"/> class.
            </summary>
            <param name="table">Table this row belongs to.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Row.Style">
            <summary>
            Row style (shared by all elements in this row).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.SelectableImage">
            <summary>
            Allow images to be displayed as part of the normal text in the conversation screen. This 
            is intended for small images e.g. thumbnails. This feature also includes redoing the 
            internal representation of objects in the conversation screen.
            
            src     - OPTIONAL  - The full url from where the image must be downloaded .
            sid     - OPTIONAL  - The store id that identifies this image uniquely within the user's store
                                  Must be in the users folder list.
                                  This is used with a multimedia (27) get file (8) call.
            dat     - OPTIONAL  - The base64 encoded image data.
                                  If included the image data is part of the message.
            crc     - OPTIONAL  - The crc of an image, if present it MUST be the 
                                  CRC of an image that is part of this message. 
            algn    - OPTIONAL  - How the image should be aligned. 
                                    Possible values are:
                                        0x1 - left
                                        0x2 - middle
                                        0x4 - right.
            flow    - OPTIONAL  - How text flows around the image
                                    Possible values are:
                                        1 - inline with text (hight is adjusted as needed).
                                        2 - wrap around image (must be left or right aligned).
                                        3 - alone on line (no text wrapping around image).
                                        w - width of image (in pixels)
                                        h - height of image (in pixels).
            xo      - OPTIONAL  - x offset of image (within w x h area in which it is drawn).
            yo      - OPTIONAL  - y offset of image (within w x h area in which it is drawn).
            fw      - OPTIONAL  - horisontal size of image frame.
            fh      - OPTIONAL  - vertical size of image frame.
            t       - OPTIONAL  - the time between each frame.
            cap     - OPTIONAL  - true/false - default true.
                                    If set to false, the client should NOT attach capability information 
                                    when performing an HTTP GET operation to retrieve an image. 
                                    This option is only relevant if the src option is used. 
            replymsg - OPTIONAL - Text that is added to the message screen 
                                  (as if the user sent the message himself) when the image is selected.
                                  If present, then a selection rectangle is also drawn around the image
                                  when it receives the focus.
            </summary>
            <example>
            Request:
                op=img|dat=ASDF23408asdflkj2309flkjsadf%3d%3d|algn=left|w=120|h=12|t=100|replymsg=blah
            </example>
            <exclude />
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            Create an inline image element from raw image data, scaled to a specified width and
            height.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from raw image data, scaled to a percentage of the
            device's display width.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            Create an inline image element from a URL, scaled to a specified width and height.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from a URL, scaled to a percentage of the device's display width.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.String,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="sendCapabilities">If set, the client will send capabilities when doing an HTTP GET to retrieve the image.</param>
            Create an inline image element from a URL, scaled to a specified width and height.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            Create an inline image element from a system bitmap object, scaled to a specified width
            and height.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from a system bitmap object, scaled to a percentage of
            the device's display width.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Int64,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            Create an inline image element from a MXit filestore image ID, scaled to a specified
            width and height.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            Create an inline image element from an IImage, scaled to a specified width and height.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            Create an inline image element from an IImage, scaled to a percentage of the device's
            display width.
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.String,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.String,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageUrl">Image URL (e.g. http://www.somewhere.com/image.png).</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Int64,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Int64,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="imageId">Image filestore ID (in the user's filestore, see "sid" tag for images).</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,System.Int32,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,System.Int32,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="displayWidth">Image width on client (in pixels).</param>
            <param name="displayHeight">Image height on client (in pixels).</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,System.Int32,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,System.Int32,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="percentageOfDeviceDisplayWidth">Image width as percentage of the device's display width.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[],MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment,MXit.Messaging.TextFlow)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
            <param name="flow">Text flow.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage,MXit.Messaging.ImageAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
            <param name="align">Image alignment.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.SelectableImage.#ctor(System.String,MXit.Messaging.Data.IImage)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.SelectableImage"/> class.
            </summary>
            <param name="reply">Text to send back if the user clicks on the image link (see "replymsg").</param>
            <param name="image">Raw image.</param>
        </member>
        <member name="T:MXit.Messaging.MessageElements.SelectionRectType">
            <summary>
            Possible appearances of a selection rectangle for table data cells that have an action type
            that is not 'None'.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.SelectionRectType.Outline">
            <summary>
            Draw the outline of a rectangle (with rounded edges) in the current selection
            background color.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.SelectionRectType.Fill">
            <summary>
            Draw a filled rectangle in the current selection background color. If this mode is set,
            the text in that cell will be drawn in the current selection foreground color.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Table">
            <summary>
            A table that can be used to organise and display images from framesets.<br />
            <br />
            A table is a rectangular grid containing a number of cells. Each data cell may refer to
            multiple framesets, which are drawn according to the drawing layer of each frameset.<br />
            <br />
            This strategy allows one to stack images.<br />
            <br />
            A data cell may also contain an operation (an action to take if that cell is selected).<br />
            <br />
            A table is sized according to the images in its data cells.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Table._data">
            <summary>
            Table data cells.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Table._columns">
            <summary>
            Table columns.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Table._rows">
            <summary>
            Table rows.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Table.Styles">
            <summary>
            All the cell-styles used in this table.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.IsStylesDirty">
            <summary>
            Check whether any of the table's styles are dirty.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.RebuildStylesList">
            <summary>
            Iterate 
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetStyle(MXit.Messaging.MessageElements.Row)">
            <summary>
            Set the style for a row.
            </summary>
            <param name="row">Row who's style to set.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetStyle(MXit.Messaging.MessageElements.Column)">
            <summary>
            Set the style for a particular column.
            </summary>
            <param name="col">Column who's style to set.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetStyle(MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Set the style for all the current cells in the table.
            </summary>
            <param name="style">Style to assign.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetClassicStyle(System.Drawing.Color)">
            <summary>
            A table with lines between all the rows and columns.
            </summary>
            <param name="border">Cell border color.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetClassicNoFrameStyle(System.Drawing.Color)">
            <summary>
            A table with lines between all the rows and columns, but without a surrounding frame.
            </summary>
            <param name="border">Cell border color.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetZebraStyle(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            A table with alternating light and dark rows, with a border between each row and cell,
            and a thicker line between the first row (heading) and the rest of the table.
            </summary>
            <param name="color">Cell text color.</param>
            <param name="border">Cell border color.</param>
            <param name="firstRow">Color of the first row.</param>
            <param name="secondRow">Color of the second row.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.SetZebraWithHeadingStyle(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            A table consisting of alternating light and dark rows, without a border between each row
            and cell. The whole table is surrounded with a border and there is a single line between the
            heading and the body.
            </summary>
            <param name="border">Cell border color.</param>
            <param name="heading">Background color of the heading.</param>
            <param name="headingShadow">Color of the line between the heading and the table body.</param>
            <param name="firstRow">Color of the first row.</param>
            <param name="secondRow">Color of the second row.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.AddStyle(MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Adds the style.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateStyle">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateEmptyStyle">
            <summary>
            Creates the empty style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateStyle(MXit.Messaging.MessageElements.IBoxStyle)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="style">Table style.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateStyle(MXit.Messaging.AlignmentType)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateStyle(MXit.Messaging.AlignmentType,System.Drawing.Color)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <param name="borderCol">Cell border color.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateStyle(MXit.Messaging.AlignmentType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <param name="borderCol">Cell border color.</param>
            <param name="background">Cell background color.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.CreateStyle(MXit.Messaging.AlignmentType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Factory method to create a style that describes the layout and style of the table.
            </summary>
            <param name="align">Alignment of the contents of the cell.</param>
            <param name="borderCol">Cell border color.</param>
            <param name="background">Cell background color.</param>
            <param name="color">Cell text color.</param>
            <returns>A style that describes the layout and style of the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.IsReplace">
            <returns> 
            true if the mode if this table is replace (meaning only data that changed should
            be returned .
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.ValidateSelection">
            <summary>
            Check that the current selection rect coordinates are within the table.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element, and
            set this object's dirty flag to false.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.InsertCol(System.Int32)">
            <summary>
            Insert a column at a specified index in the table.<br/>
            <br/>
            If the index is out of range, the column is insert either at the beginning, or end of
            the table (depending on which side the index is out of range).<br/>
            <br/>
            After the column is created, the data cell objects for the column are also created.
            </summary>
            <param name="idx">0-based index where the new column should be inserted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.AddCol">
            <summary>
            Append a column to the end of the table.<br/>
            <br/>
            After the column is created, the data cell objects for the column are also created.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.DeleteCol(System.Int32)">
            <summary>
            Delete a column at a specified index in the table.
            </summary>
            <param name="col">0-based index of the column that should be deleted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.Col(System.Int32)">
            <summary>
            Retreive a column from the table.
            </summary>
            <param name="col">0-based index of the column to retrieve.</param>
            <returns>A column from the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.Row(System.Int32)">
            <summary>
            Retreive a row from the table.
            </summary>
            <param name="row">0-based index of the row to retrieve.</param>
            <returns>A row from the table.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.InsertRow(System.Int32)">
            <summary>
            Insert a row at a specified index in the table.<br/>
            <br/>
            If the index is out of range, the row is insert either at the beginning, or end of
            the table (depending on which side the index is out of range).<br/>
            <br/>
            After the row is created, the data cell objects for the row are also created.
            </summary>
            <param name="idx">0-based index where the new row should be inserted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.AddRow">
            <summary>
            Append a row to the end of the table.<br/>
            <br/>
            After the row is created, the data cell objects for the row are also created.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.DeleteRow(System.Int32)">
            <summary>
            Delete a row at a specified index in the table.
            </summary>
            <param name="row">0-based index of the row that should be deleted.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Table.#ctor(MXit.User.IDeviceInfo,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="toDeviceInfo">Device information for the user to whom this table will be sent.</param>
            <param name="name">Unique name for the table.</param>
            <param name="rows">Number of rows.</param>
            <param name="cols">Number of columns.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.ToDevice">
            <summary>
            The device of the user to whom this table will be sent.<br/>
             <br/>
            The recipient user's device is needed to construct markup when rich text is
            added to the table's data cells.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.StylesDirty">
            <summary>
            Set to true if the list of styles have been modified and needs to be rebuilt.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.HasMarkup">
            <summary>
            Flag to indicate if this table contains MXit markup.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.ActionCreator">
            <summary>
            Factory method to create the set of actions that can be associated with cells in this
            table.<br/>
            <br/>
            The references returned by this function should be assigned to the relevant data cell,
            if that action should be performed by the cell.<br/>
            <br/>
            Do NOT create duplicate actions as the whole action list need be send to the client
            if a change was made or the table send mode type is replace - Reuse the Actions.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Actions">
            <summary>
            All actions associated with this table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.RowCount">
            <summary>
            Total number of rows in the table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.ColCount">
            <summary>
             Total number of columns in the table.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Width">
            <summary>
            Width of the table. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Mode">
            <summary>
            Table transfer mode.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Flow">
            <summary>
            Text-flow of the table (how text should flow around the table).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Style">
            <summary>
            Table style.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.DefaultSelection">
            <summary>
            Default selection of framesets for this table.<br/>
            <br/>
            The default selection is useful for cases where all items are not placed on the table
            right from the start.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.SelectionRect">
            <summary>
            Coordinates of the selection rectangle.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.SelectionFrames">
            <summary>
            Frameset that should be used to draw the selection rectangle.
            By default, the selection rectangle is rendered by the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.SelectionMode">
            <summary>
            Appearance of selection rectangle that don't have an action of "None".
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Tag">
            <summary>
            An arbitrary object that can be attached to this table.<br />
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Table.Item(System.Int32,System.Int32)">
            <summary>
            Array indexer to retrieve a data cell from the table.
            </summary>
            <param name="row">Table row (0-based index).</param>
            <param name="col">Table column (0-based index).</param>
            <returns>Data cell at the specified row and column.</returns>
        </member>
        <member name="T:MXit.Messaging.MessageElements.TableData">
            <summary>
            A single cell in a table.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableData.Seperator">
            <summary>
            Seperator between different table data elements.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableData._table">
            <summary>
            Table this cell belongs to.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableData._actionDirty">
            <summary>
            Keeps track of whether the action associated with THIS cell has been changed.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TableData.ClearAction">
            <summary>
            Remove the action on this cell.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableData._msgDirty">
            <summary>
            Set to the dirty state whenever IsMsgDirty is called. Is there as an optimisation so that
            IsMsgDirty does not have to be called unnecessarily.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableData._previousBody">
            <summary>
            Stores the previous message body that was sent to the client.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TableData.IsMsgDirty">
            <summary>
            Check whether the message is dirty by comparing with previous message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TableData.HasMarkup">
            <summary>
            Check if the cell contains content with markup.
            </summary>
            <returns>True if the cell contains markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TableData.EncodeAction(System.Text.StringBuilder)">
            <summary>
            Encode an action.
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TableData.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element, and
            set this object's dirty flag to false.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TableData.#ctor(MXit.Messaging.MessageElements.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.TableData"/> class.
            </summary>
            <param name="table">Table this cell belongs to.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TableData.Frames">
            <summary>
            Frameset for this cell (layered set of images).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TableData.Action">
            <summary>
            The action to perform when this cell is selected.<br />
            <br />
            To create an action, use the CreateAction method of the table this cell belongs to.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TableData.Tag">
            <summary>
            An arbitrary object that can be attached to this cell.<br />
            This is NOT sent through with the actual message to the client.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TableData.Content">
            <summary>
            Rich text content for the cell.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TableData.Style">
            <summary>
            Cell style.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TableData.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Replies.TableReply._Selected">
            <summary>
            A list of the coordinates of all the data cells in the table that have been
            selected by the user (in order of their selection).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.Replies.TableReply._Placed">
            <summary>
            A list of the coordinates of all the data cells in the table where a place
            operation has been performed (in order of placement).
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.TableReply.ParseCoords(System.String[],System.Collections.Generic.List{MXit.Messaging.MessageElements.ICellCoord})">
            <summary>
            Extract the individual coordinates (in order) that were place or selected.
            </summary>
            <param name="parms"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.TableReply.Parse">
            <summary>
            This is called to populate the rest of the fields of this class once a Value is set.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Replies.TableReply.#ctor(MXit.Messaging.MessageElements.Replies.IReply)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Replies.TableReply"/> class.
            </summary>
            <param name="reply">Instantiate this classed (and its variables) based on the values of another IReply.</param>
        </member>
        <member name="T:MXit.Messaging.MessageElements.TableSendModeType">
            <summary>
            Possible ways to send a table to a MXit user.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableSendModeType.Replace">
            <summary>
            The default - all the table's data is sent with every message. No attempt is
            made to send only data that has changed.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.TableSendModeType.Update">
            <summary>
            Attempt to only send data that has been modified.<br />
            <br />
            In this mode, if less than half the table cells were modified, only those cells are
            sent, each with it's coordinates. Header data like action lists, table style, style
            lists, etc. are only sent when they have changed. This mode assumes the client keeps a
            reference of the table and just updates the modifed parts.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.TextMenuItem">
            <summary>
            A text menu item.<br />
            <br />
            Text menu items typically look like this:<br />
            m) My menu item<br />
            <br />
            The 'm)' part of the menu item is selectable. The idea is that the user can either click on the 'm)' link,
            or just type 'm' to select the menu item.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TextMenuItem.AppendToMessage(MXit.Messaging.IMessageToSend)">
            <summary>
            Append this compound message element to a message.
            </summary>
            <param name="message">The message to append the element to.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.TextMenuItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.TextMenuItem"/> class.
            </summary>
            <param name="selectText">The text the user should type in to select this menu item.</param>
            <param name="descriptionText">The menu item description text.</param>
            <param name="name">This menu item's <see cref="P:MXit.Messaging.MessageElements.TextMenuItem.Link"/> message element's name (should be unique).</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TextMenuItem.SelectText">
            <summary>
            The text the user should type in to select this menu item.<br />
            <br />
            This text, with a ')' character appended, will be displayed as a link that the user can click on. 
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TextMenuItem.DescriptionText">
            <summary>
            The menu item description text.<br/>
            <br/>
            This text will be displayed next to the <see cref="P:MXit.Messaging.MessageElements.TextMenuItem.SelectText"/> to give the user an idea of what will
            happen if he/she selects the menu item.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.TextMenuItem.Link">
            <summary>
            The link the user can click on to select this menu item.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.Thickness">
            <summary>
            A device independent thickness.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.Set(System.Int32)">
            <summary>
            Set the thickness as a number of pixels.
            </summary>
            <param name="value">Number of pixels.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.SetPercentage(System.Double)">
            <summary>
            Set the thickness as a percentage.
            </summary>
            <param name="value">Percentage.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.SetPoints(System.Int32)">
            <summary>
            Set the thickness as a number of device independent points.
            </summary>
            <param name="value">Number of points.</param>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.SetClientDecides">
            <summary>
            Let the client decide what the thickness should be.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.SetContentLock">
            <summary>
            Let the client decide what the thicknes should be, based on the contents of the cell.<br />
            <br />
            When using this option, the containing rectangle will have no influence on the
            thickness.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.Equals(System.Object)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="obj">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.Equals(MXit.Messaging.MessageElements.Thickness)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="thickness">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.GetHashCode">
            <summary>
            Generate a hash code for this object.
            </summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Thickness"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.Thickness.#ctor(MXit.Messaging.MessageElements.IThickness)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.Thickness"/> class.
            </summary>
            <param name="thickness">Object to copy.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Thickness.Dirty">
            <summary>
            The dirty flag will be set to true if any of this object's members have changed since
            the last time it was encoded.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Thickness.Type">
            <summary>
            Type to specify how the thickness value should be interpreted.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.Thickness.Value">
            <summary>
            Thickness value (can be pixels, a percentage, etc., depending on the thickness type).
            </summary>
        </member>
        <member name="T:MXit.Messaging.Message">
            <summary>
            A MXit message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.Message.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Messaging.Message.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.Messaging.Message.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Messaging.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Message"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.Message.#ctor(System.String,System.String,System.String,MXit.Messaging.MessageType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Message"/> class.
            </summary>
            <param name="from">UserId of the MXit user, or name of the app, who sent the message.</param>
            <param name="to">UserId of the MXit user, or name of the app, to whom the message was sent.</param>
            <param name="body">Text body of the message.</param>
            <param name="type">Message type.</param>
            <param name="containsMarkup">Flag to indicate if this message contains markup.</param>
        </member>
        <member name="M:MXit.Messaging.Message.#ctor(System.String,System.String,System.String,MXit.Messaging.MessageType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.Message"/> class.
            </summary>
            <param name="from">UserId of the MXit user, or name of the app, who sent the message.</param>
            <param name="to">UserId of the MXit user, or name of the app, to whom the message was sent.</param>
            <param name="body">Text body of the message.</param>
            <param name="type">Message type.</param>
            <param name="containsMarkup">Flag to indicate if this message contains markup.</param>
            <param name="maySpool">Flag to indicate if this message may be spooled.</param>
        </member>
        <member name="P:MXit.Messaging.Message.From">
            <summary>
            The message sender.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp is sending the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Message.To">
            <summary>
            The message recipient.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp will receive the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Message.Body">
            <summary>
            The message body.<br/>
            	<br/>
            The message body may contain text, MXit markup and MXit commands.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Message.Type">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Message.ContainsMarkup">
            <summary>
            A flag to indicate if the message <see cref="P:MXit.Messaging.Message.Body"/> contains MXit markup.<br/>
            <br/>
            If this flag is manually set, you have to make sure any markup characters in the message
            text are escaped.
            </summary>
        </member>
        <member name="P:MXit.Messaging.Message.MaySpool">
            <summary>
            A flag to indicate if this message may be spooled.<br />
            <br />
            If the message may be spooled, and the recipient user is offline at the time when the
            message is sent, the message will be kept for a few days and delivered the moment the
            user comes back online. The amount of time for which messages will be spooled before
            they are discarded is configured on the spool server and depends mostly on available
            resources. In general you can expect a message to be kept for at least 24 hours.<br />
            <br />
            If the message may not be spooled, and the message recipient is offline, the message 
            will be discarded immediately.<br />
            <br />
            NB: Developers may need to obtain special permission to be able to use this feature.
            The privilidge to use this feature may also be revoked if it is abused (e.g. sending
            of SPAM).
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ThicknessType">
            <summary>
            Possible ways to interpret a thickness value.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ThicknessType.Pixel">
            <summary>
            Thickness value represents the number of pixels.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ThicknessType.Percentage">
            <summary>
            Thickness value represents a percentage.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ThicknessType.Points">
            <summary>
            Device independent points (relative to a 10000 pixel wide display).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ThicknessType.ClientDecides">
            <summary>
            The client has the prerogative to decide what it wants to make the value.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ThicknessType.ContentLock">
            <summary>
            Make it as wide as the contents, but no wider.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageReceived">
            <summary>
            A formatted message received from a MXit user or app.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.CreateReplyMessage">
             <summary>
             Create a message to reply to the sender of this message.<br />
             <br />
             The reply message will have its From and To fields automatically filled in, by using
             the recipient and sender of this message, and switching them around.
             </summary>
             <returns>Message to reply to the sender of this message.</returns>
             <example>
             <code>
             public void OnMessageReceived(MessageReceived messageReceived)
             {
                 MessageToSend messageToSend = messageReceived.CreateReplyMessage();
            
                // ...
             }
             </code>
             </example>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.CreatePaymentRequest(System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Create an object that can be used to request a payment from the sender of this message.
            </summary>
            <param name="moolaAmount">The amount of MXit Moola the MXit user will be charged if he/she confirms this payment request.</param>
            <param name="transactionReference">The payment's unique transaction reference.</param>
            <param name="productId">The product ID of the product of service for which a payment is being requested, in your organization's product catalogue.</param>
            <param name="productName">The name of the product or service for which a payment is being requested.</param>
            <param name="productDescription">A description of the product of service for which a payment is being requested.</param>
            <returns></returns>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.CreateRedirectRequest(System.String,System.String,System.String)">
            <summary>
            Create a request to redirect the sender of this message to another MXit service.
            </summary>
            <param name="target">The target MXit service or ExternalApp name where the user should be redirected to.</param>
            <param name="parameters">Parameter data to include in the redirect message that is sent to the target service.</param>
            <param name="sessionData">Session data to store that will be passed to your service when the user returns to your service.</param>
            <returns>
            A request to redirect the sender of this message to another MXit service.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.CreateRedirectRequest_Home">
            <summary>
            Create a request to redirect the sender of this message to the initial service he came from, before he was
            redirected to any other services.
            </summary>
            <returns>
            A request to redirect the sender of this message to the very first service in the redirect history stack.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.CreateRedirectRequest_Back">
            <summary>
            Create a request to redirect the sender of this message to the previous service he came from, before he was
            redirected to your ExternalApp.
            </summary>
            <returns>
            A request to redirect the sender of this message to the previous service in the redirect history stack.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.CreateRedirectRequest_TemporaryContact(System.String,System.String,System.String)">
            <summary>
            Create a request to redirect the sender of this message to another MXit service, in a temporary contact.
            </summary>
            <param name="target">The target MXit service or ExternalApp name where the user should be redirected to.</param>
            <param name="parameters">Parameter data to include in the redirect message that is sent to the target service.</param>
            <param name="temporaryContactAlias">The temporary contact's alias.</param>
            <returns>
            A request to redirect the sender of this message to another MXit service.
            </returns>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.ExtractReply">
            <summary>
            Extracts the replies to a command that was embedded in a named element like a table or a link.
            </summary>
            <returns>The replies to a command that was embedded in a named element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Messaging.MessageReceived.#ctor(System.String,System.String,System.String,MXit.Messaging.MessageType,System.Boolean,MXit.User.IDeviceInfo,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageReceived"/> class.
            </summary>
            <param name="from">UserId of the MXit user, or name of the app, who sent the message.</param>
            <param name="to">UserId of the MXit user, or name of the app, to whom the message was sent.</param>
            <param name="body">Text body of the message.</param>
            <param name="type">Message type.</param>
            <param name="containsMarkup">Flag to indicate if this message contains markup.</param>
            <param name="fromDevice">Device used by this message's sender (to create reply messages).</param>
            <param name="hasRootContext">Set this flag to indicate if the message was sent within a root context (i.e. if a "back" service redirect won't make sense).</param>
            <param name="maySpool">Flag to indicate if this message may be spooled.</param>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.From">
            <summary>
            The message sender.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp is sending the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.To">
            <summary>
            The message recipient.<br/>
            	<br/>
            This may be a MXit user's UserId, the name of a MXit service or ExternalApp, or a contact name
            that defines the context within which a MXit service or ExternalApp will receive the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.Body">
            <summary>
            The message body.<br/>
            	<br/>
            The message body may contain text, MXit markup and MXit commands.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.Type">
            <summary>
            The message type.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.ContainsMarkup">
            <summary>
            A flag to indicate if the message <see cref="P:MXit.Messaging.MessageReceived.Body"/> contains MXit markup.<br/>
            	<br/>
            If this flag is manually set, you have to make sure any markup characters in the message
            text are escaped.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.MaySpool">
            <summary>
            A flag to indicate if this message may be spooled.<br/>
            	<br/>
            If the message may be spooled, and the recipient user is offline at the time when the
            message is sent, the message will be kept for a few days and delivered the moment the
            user comes back online. The amount of time for which messages will be spooled before
            they are discarded is configured on the spool server and depends mostly on available
            resources. In general you can expect a message to be kept for at least 24 hours.<br/>
            	<br/>
            If the message may not be spooled, and the message recipient is offline, the message
            will be discarded immediately.<br/>
            	<br/>
            NB: Developers may need to obtain special permission to be able to use this feature.
            The privilidge to use this feature may also be revoked if it is abused (e.g. sending
            of SPAM).
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.FromDevice">
            <summary>
            Message sender's device.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageReceived.HasRootContext">
            <summary>
            Indicates if the message was sent within a root context.<br />
            <br />
            If the message was <em>not</em> sent from a root context, it means the service was reached when another
            service redirected to it, in the same context (contact) as the original service. In cases like this the
            application should allow the user to get back to the previous service, by including a "back" service
            redirect somewhere in its menu structure.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageElements.ImageStripReference">
            <summary>
            A reference to an image strip, for which the image data is stored remotely.<br />
            <br />
            An image strip is an image that is logically broken up into a set of smaller images, or
            frames, that are all of equal size.<br />
            <br />
            When an app sends an image strip to a MXit client, the client will cache the strip, so that
            the frames within the image strip can then referenced, without having to transfer the image
            data each time.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageElements.ImageStripReference._frameCount">
            <summary>
            Number of frames in the strip.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ImageStripReference.Encode">
            <summary>
            Encode the element, i.e. create the underlying message body text for the element.
            </summary>
            <returns>Encoded element text.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageElements.ImageStripReference.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageElements.ImageStripReference"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="frameWidth">Width of the frame.</param>
            <param name="frameHeight">Height of the frame.</param>
            <param name="layer">The layer index (lower is further back/behind).</param>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ImageStripReference.Name">
            <summary>
            Unique name for this message element.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ImageStripReference.FrameWidth">
            <summary>
            Width of a single frame in the strip.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ImageStripReference.FrameHeight">
            <summary>
            Height of a single frame in the strip.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ImageStripReference.FrameCount">
            <summary>
            Number of frames in the strip.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ImageStripReference.Validator">
            <summary>
            A unique ID, sent to the client, that the client can use to request image strips it
            does not yet have.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageElements.ImageStripReference.Layer">
            <summary>
            The layer number is used to order multiple image strips for the same set of table cells.<br/>
            <br/>
            If multiple image strips are used to draw the data in the cells, the images are drawn
            in order of increasing layer numbers.<br/>
            <br/>
            A layer of 0 would typically be the background, 1 the foreground and 2 the "selected" look.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageToSend">
            <summary>
            A formatted message to send to a MXit user.<br/>
            <br/>
            <see cref="T:MXit.Messaging.MessageToSend"/> instances are not thread-safe. If you are accessing the same
            <see cref="T:MXit.Messaging.MessageToSend"/> instance from multiple threads concurrently, you have to put your own
            synchronization mechanisms in place.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageToSend.InitialBodyBufferSize">
            <summary>
            Initial message body buffer size.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageToSend._toDevice">
            <summary>
            Message recipient's device.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageToSend._body">
            <summary>
            Formatted text body of the message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CreateEmptyMessage">
            <summary>
            Create a new message with the same attributes and settings as this message, but an
            empty body.<br />
            <br />
            This function will typically be used if you need to create a message that will be sent
            to the same user, with the same device.
            </summary>
            <returns>A new message with the same attributes and settings as this message, but an
            empty body.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.EnableMarkup">
            <summary>
            Enable MXit markup for this message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.RecipientDeviceSupportsFeature(MXit.User.DeviceFeatures)">
            <summary>
            Check if the message recipient's device supports a given device feature.
            </summary>
            <param name="feature">Device feature to check for.</param>
            <returns>True if the recipient's device supports the given device feature.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.RecipientDeviceSupportsRequiredFeatures(MXit.Messaging.MessageElements.IMessageElement)">
            <summary>
            Check if the message recipient's device supports all the device features required by a
            message element.
            </summary>
            <param name="messageElement">Message element to check.</param>
            <returns>True if the recipient's device can render the message element.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.EscapeText(System.String)">
            <summary>
            Constructs a string that contains MXit markup where any reserved characters ( \ $ . # * _ / )
            in the input string is escaped, so that they will be correctly interpreted by MXit clients.<br />
            <br />
            If the input string contains MXit commands (::op=.........:), the command text will not
            be escaped.
            </summary>
            <param name="input">Raw input containing un-escaped special characters.</param>
            <returns>String that contains all the text in the input string, but with all reserved characters correctly escaped.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileString(System.String,MXit.Messaging.TextMarkup)">
            <summary>
            Apply markup to text.
            </summary>
            <param name="text">Raw text.</param>
            <param name="markup">Markup to apply.</param>
            <returns>Text containing markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileString(System.String,MXit.Messaging.TextMarkup[])">
            <summary>
            Apply markup to text.
            </summary>
            <param name="text">Raw text.</param>
            <param name="markup">Markup to apply.</param>
            <returns>Text containing markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileString(System.String,System.Drawing.Color)">
            <summary>
            Apply color to text.
            </summary>
            <param name="text">Raw text.</param>
            <param name="color">Color to apply.</param>
            <returns>Text containing color markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileStringNoEscape(System.String,System.Drawing.Color)">
            <summary>
            Apply color to text (without escaping the text).
            </summary>
            <param name="text">Raw text.</param>
            <param name="color">Color to apply.</param>
            <returns>Text containing color markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileString(System.String,System.Drawing.Color,MXit.Messaging.TextMarkup[])">
            <summary>
            Apply text-style markup and color to text.
            </summary>
            <param name="text">Raw text.</param>
            <param name="color">Color to apply.</param>
            <param name="markup">Markup to apply.</param>
            <returns>Text containing text-style and color markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileString(MXit.Messaging.Emoticons)">
            <summary>
            Create compiled message text for an emoticon.
            </summary>
            <param name="emoticon">Emoticon to compile.</param>
            <returns>Text containing emoticon markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.CompileString(MXit.Messaging.MessageElements.IMessageElement)">
            <summary>
            Create compiled message text for a message element.
            </summary>
            <param name="element">Message element to compile.</param>
            <returns>Text containing message element markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.ProcessCommand(MXit.Messaging.MessageElements.MessageElement)">
            <summary>
            Create compiled message text for a command message element.
            </summary>
            <param name="command">Command message element to compile.</param>
            <returns>Text containing command message element markup.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Clear">
            <summary>
            Empty the current message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendNoEscape(System.String)">
            <summary>
            Append text to the message "as is", without escaping special characters, or applying
            any modifications to the text.<br />
            <br />
            This function should only be used in internally or in special situations, e.g. as an
            override to bypass the normal message builder functions.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(System.String,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(System.String,System.Drawing.Color)">
            <summary>
            Append text with color to the message body.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(System.String,System.Drawing.Color,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with color and markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(MXit.Messaging.Emoticons)">
            <summary>
            Append an emoticon image to the message.
            </summary>
            <param name="emoticon">Emoticon to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(MXit.Messaging.Vibes)">
            <summary>
            Append a vibration to the message.
            </summary>
            <param name="vibe">Vibration to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(MXit.Messaging.MessageElements.IMessageElement)">
            <summary>
            Append a message element to the message.
            </summary>
            <param name="element">Message element to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.Append(MXit.Messaging.MessageElements.ICompoundMessageElement)">
            <summary>
            Appends the specified compound message element to the message.
            </summary>
            <param name="compoundMessageElement">The compound message element to append to the message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLineNoEscape(System.String)">
            <summary>
            Append text to the message "as is", without escaping special characters, or applying
            any modifications to the text.<br />
            <br />
            This function should only be used in internally or in special situations, e.g. as an
            override to bypass the normal message builder functions.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine">
            <summary>
            Append a new line to the message.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(System.String)">
            <summary>
            Append text to the message.
            </summary>
            <param name="text">Text to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(System.String,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(System.String,System.Drawing.Color)">
            <summary>
            Append text with color to the message body.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(System.String,System.Drawing.Color,MXit.Messaging.TextMarkup[])">
            <summary>
            Append text with color and markup (bold, italics, etc.) to the message.
            </summary>
            <param name="text">Text to append.</param>
            <param name="color">Color to apply to the text.</param>
            <param name="markup">Markup to apply to the text.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(MXit.Messaging.Emoticons)">
            <summary>
            Append an emoticon image to the message.
            </summary>
            <param name="emoticon">Emoticon to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(MXit.Messaging.Vibes)">
            <summary>
            Append a vibration to the message.
            </summary>
            <param name="vibe">Vibration to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(MXit.Messaging.MessageElements.IMessageElement)">
            <summary>
            Append a message element to the message.
            </summary>
            <param name="element">Message element to append.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.AppendLine(MXit.Messaging.MessageElements.ICompoundMessageElement)">
            <summary>
            Appends the specified compound message element to the message.
            </summary>
            <param name="compoundMessageElement">The compound message element to append to the message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageToSend"/> class.
            </summary>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.#ctor(System.String,MXit.User.IUserInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageToSend"/> class.
            </summary>
            <param name="from">From.</param>
            <param name="toUser">MXit user to whom this message will be sent.</param>
        </member>
        <member name="M:MXit.Messaging.MessageToSend.#ctor(System.String,System.String,MXit.User.IDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Messaging.MessageToSend"/> class.
            </summary>
            <param name="from">UserId of the MXit user, or app name, from whom the message will be sent.</param>
            <param name="to">UserId of the MXit user, or app name, to whom the message will be sent.</param>
            <param name="toDevice">Message recipient's device.</param>
        </member>
        <member name="P:MXit.Messaging.MessageToSend.Body">
            <summary>
            Formatted text body of the message.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageToSend.Type">
            <summary>
            Type of the message e.g. normal, command, auto-command, etc.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageToSend.ToDevice">
            <summary>
            Message recipient's device.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageToSend.RecipientDeviceInfo">
            <summary>
            Message recipient's device.
            </summary>
        </member>
        <member name="P:MXit.Messaging.MessageToSend.IsCommand">
            <summary>
            If set, this message has a MXit command message type.
            </summary> 
        </member>
        <member name="P:MXit.Messaging.MessageToSend.IsAutoCommand">
            <summary>
            If set, this message has a MXit auto-command message type.
            </summary>
        </member>
        <member name="T:MXit.Messaging.MessageType">
            <summary>
            MXit message types.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Unspecified">
            <summary>
            Unknown or unspecified message type.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Normal">
            <summary>
            A single message that is not part of a conversation.<br/>
            <br/>
            This message type was inherited from XMPP. It implies a single message that is not part of a
            conversation, e.g. a notification message. In practice most services and clients treat
            <see cref="F:MXit.Messaging.MessageType.Normal"/> and <see cref="F:MXit.Messaging.MessageType.Chat"/> messages in the same way.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Chat">
            <summary>
            A message that is part of a conversation.<br/>
            <br/>
            This message type was inherited from XMPP. It implies a message that is part of a conversation.
            In practice most services and clients treat <see cref="F:MXit.Messaging.MessageType.Normal"/> and <see cref="F:MXit.Messaging.MessageType.Chat"/>
            messages in the same way.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.MXitCommand">
            <summary>
            Structured command message. See appendix H of MXit Open Protocol Specification.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Event">
            <summary>
            Event messages, e.g. message displayed and message delivered events.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Stats">
            <summary>
            Used by various services for statistics, e.g. bandwidth counters.
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.ServiceRedirect">
            <summary>
            Redirect request received from proxy, usually generated when a user navigates
            from one bot to another using a MXit link (e.g. mxit://[botname]/).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Gallery">
            <summary>
            Legacy message type used by the gallery service (e.g. offer files).<br />
            <br />
            TODO: Should be replaced by filestore packets (70000+).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Service2Service">
            <summary>
            Message from one service to another. Used by service messages (e.g. if Tradepost needs to send an contact
            invite as a user).<br />
            <br />
            TODO: Deprecate this message type since there is also a message flag to identify a service 2 service
            message. 
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.MXitAutoCommand">
            <summary>
            Command message that expects no user interaction (e.g. a service asks the client for all the
            colors in the user's current skin - the user remains blissfully unaware that any comms are taking
            place).
            </summary>
        </member>
        <member name="F:MXit.Messaging.MessageType.Mxml">
            <summary>
            A MXML (MXit Markup Language) message. MXit Markup Language is an XML based layout language for
            mobile phone screen controls. Is optimized to be small (as in bytes required) to minimize the amount
            of data that needs to be sent to and from clients.<br />
            <br />
            The first prototypes of the language was done in 2011, mostly by Jaco Loubser and the first MXit
            clients to support the language were released in 2012.
            </summary>
        </member>
        <member name="T:MXit.Messaging.TextFlow">
            <summary>
            Types of text flow.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextFlow.Inline">
            <summary>
            Text in-line with non-text elements.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextFlow.Around">
            <summary>
            Text around non-text elements.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextFlow.AloneOnLine">
            <summary>
            Alone on line. This element should be rendered on it's own line.  <br />
            Use this for getting smooth scroll to work on images.
            </summary>
        </member>
        <member name="T:MXit.Messaging.TextMarkup">
            <summary>
            Text-style markup that can be applied to a MXit message.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextMarkup.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextMarkup.Underline">
            <summary>
            Underlined text.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextMarkup.Italics">
            <summary>
            Italized text.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextMarkup.FontIncrease">
            <summary>
            Text with a bigger font size.
            </summary>
        </member>
        <member name="F:MXit.Messaging.TextMarkup.FontDecrease">
            <summary>
            Text with a smaller font size.
            </summary>
        </member>
        <member name="T:MXit.Messaging.Vibes">
            <summary>
            Vibrations that can be included in MXit messages.
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.CoolVibrations">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.PurpleRain">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.Polite">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.RockNRoll">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.SummerSlumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.ElectricRazor">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.SOS">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.JackHammer">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.BumbleBee">
            <summary>
            
            </summary>
        </member>
        <member name="F:MXit.Messaging.Vibes.Ripple">
            <summary>
            
            </summary>
        </member>
        <member name="T:MXit.Navigation.RedirectRequest">
            <summary>
            A request to redirect a MXit user to another service.
            </summary>
        </member>
        <member name="M:MXit.Navigation.RedirectRequest.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.Navigation.RedirectRequest.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.Navigation.RedirectRequest.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.Navigation.RedirectRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.Navigation.RedirectRequest"/> class.
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.UserId">
            <summary>
            UserId of the user to whom the payment request will be submitted.
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.ContactName">
            <summary>
            The context within which the user is currently accessing your ExternalApp.<br/>
            <br/>
            This is the value of the <see cref="P:MXit.Messaging.Message.To"/> parameter of the message the user
            sent to your ExternalApp. I.e. it is the name of the contact within which the user is accessing your
            ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.Target">
            <summary>
            The target where the user should be redirected to.<br/>
            <br/>
            The target can either be a MXit service or ExternalApp name, or a special target like
            <see cref="F:MXit.Navigation.RedirectRequest.CommonTargets.Home"/>.
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.Parameters">
            <summary>
            Parameter data to include in the redirect message that is sent to the <see cref="P:MXit.Navigation.RedirectRequest.Target"/> service.
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.SessionData">
            <summary>
            Session data to store that will be passed to your service when the user returns to your service.<br/>
            <br/>
            You can only store session data for redirect requests that do not redirect to a temporary contact
            (see <see cref="P:MXit.Navigation.RedirectRequest.UseTemporaryContact"/>).
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.UseTemporaryContact">
            <summary>
            Set this flag to redirect a user in a temporary contact, instead of the same contact in which the user
            is currently talking to your ExternalApp.<br />
            <br />
            Setting this property to <c>true</c> is almost like opening a link by using the "open in new tab"
            feature of your web browser.
            </summary>
        </member>
        <member name="P:MXit.Navigation.RedirectRequest.TemporaryContactAlias">
            <summary>
            If this is a request to redirect a user to a temporary contact (see <see cref="P:MXit.Navigation.RedirectRequest.UseTemporaryContact"/>),
            use this property to specify the temporary contact's alias.
            </summary>
        </member>
        <member name="T:MXit.Navigation.RedirectRequest.CommonTargets">
            <summary>
            Commonly used redirect <see cref="P:MXit.Navigation.RedirectRequest.Target"/>s.
            </summary>
        </member>
        <member name="F:MXit.Navigation.RedirectRequest.CommonTargets.Home">
            <summary>
            Use this target to redirect to the initial service where the user came from, before he was
            redirected to any other services.
            </summary>
        </member>
        <member name="F:MXit.Navigation.RedirectRequest.CommonTargets.Back">
            <summary>
            Use this target to redirect to the previous service where the user came from, before he was
            redirected your ExternalApp.
            </summary>
        </member>
        <member name="T:MXit.OAuth2.AuthorizationResult">
            <summary>
            MXit OAuth authorization result codes.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.AuthorizationResult.Allow">
            <summary>
            User selected 'Allow'.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.AuthorizationResult.AlwaysAllow">
            <summary>
            User selected 'Always Allow'.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.AuthorizationResult.Deny">
            <summary>
            User selected 'Deny'.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.AuthorizationResult.Timeout">
            <summary>
            Authorization timed out before a response was received from the user.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.AuthorizationResult.Logout">
            <summary>
            The user logged out without authorizing or rejecting the token.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.AuthorizationResult.Cancelled">
            <summary>
            The authorization was cancelled.
            </summary>
        </member>
        <member name="T:MXit.OAuth2.TokenRequest">
            <summary>
            An OAuth token request initiated by an application which requires a Mxit user's approval.
            </summary>
        </member>
        <member name="M:MXit.OAuth2.TokenRequest.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.OAuth2.TokenRequest.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.OAuth2.TokenRequest.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            	<code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.OAuth2.TokenRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.OAuth2.TokenRequest"/> class.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenRequest.UserId">
            <summary>
            UserId of the MXit user for whom the OAuth token is being requested.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenRequest.ContactName">
            <summary>
            The context within which the user is currently accessing your ExternalApp.<br/>
            <br/>
            This is the value of the <see cref="P:MXit.Messaging.Message.To"/> parameter of the message the user
            sent to your ExternalApp. I.e. it is the name of the contact within which the user is accessing your
            ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenRequest.Context">
            <summary>
            Context information to associate with the asynchronous request.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenRequest.Scope">
            <summary>
            The OAuth scopes to which access is required by the application.
            </summary>
        </member>
        <member name="T:MXit.OAuth2.TokenResponse">
            <summary>
            A response to an asynchronous request for an OAuth token.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._userId">
            <summary>
            See <see cref="P:MXit.OAuth2.TokenResponse.UserId"/>.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._contactName">
            <summary>
            See <see cref="P:MXit.OAuth2.TokenResponse.ContactName"/>.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._accessToken">
            <summary>
            see <see cref="P:MXit.OAuth2.TokenResponse.AccessToken"/>
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._scope">
            <summary>
            See <see cref="P:MXit.OAuth2.TokenResponse.Scope"/>.
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._tokenExpiry">
            <summary>
            see <see cref="P:MXit.OAuth2.TokenResponse.TokenExpiry"/>
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._refreshToken">
            <summary>
            see <see cref="P:MXit.OAuth2.TokenResponse.RefreshToken"/>
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._openIdToken">
            <summary>
            see <see cref="P:MXit.OAuth2.TokenResponse.OpenIdToken"/>
            </summary>
        </member>
        <member name="F:MXit.OAuth2.TokenResponse._authorizationResult">
            <summary>
            see <see cref="P:MXit.OAuth2.TokenResponse.AuthorizationResult"/>
            </summary>
        </member>
        <member name="M:MXit.OAuth2.TokenResponse.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            	<code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.OAuth2.TokenResponse.#ctor(MXit.Async.AsyncOperationResult,System.Object,System.String,System.String,System.String,System.String[],System.DateTime,System.String,System.String,MXit.OAuth2.AuthorizationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.OAuth2.TokenResponse"/> class.
            </summary>
            <param name="result">The asynchronous operation's result.</param>
            <param name="context">Context information that was associated with the asynchronous request when it was initiated.</param>
            <param name="userId">UserId of the MXit user for whom the OAuth token is being requested.</param>
            <param name="contactName">The name of the contact within which the user was accessing the ExternalApp at the time the request was made.</param>
            <param name="accessToken">The access token issued for the requested scopes.</param>
            <param name="scope">The list of scopes for which the access token is valid.</param>
            <param name="tokenExpiry">The expiry time of the access token.</param>
            <param name="refreshToken">The refresh token. (Only included when user-level authorization is required)</param>
            <param name="openIdToken">The OpenId token. (Only included when user-level authorization is required)</param>
            <param name="authorizationResult">The result of the user authorization.</param>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.UserId">
            <summary>
            UserId of the MXit user for whom the OAuth token is being requested.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.ContactName">
            <summary>
            The context within which the user was accessing your ExternalApp at the time the request was made.<br />
            <br />
            This is the name of the contact within which the user was accessing your ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.AccessToken">
            <summary>
            The access token issued for the requested scopes.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.Scope">
            <summary>
            The scopes to which this access token allows access.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.TokenExpiry">
            <summary>
            The expiry time of the access token.
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.RefreshToken">
            <summary>
            The refresh token. (Only included when user-level authorization is required)
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.OpenIdToken">
            <summary>
            The OpenId token. (Only included when user-level authorization is required)
            </summary>
        </member>
        <member name="P:MXit.OAuth2.TokenResponse.AuthorizationResult">
            <summary>
            The result of the user authorization.
            </summary>
        </member>
        <member name="T:MXit.SDK">
            <summary>
            Singleton class with utility functions for MXit's External Application SDK.
            </summary>
        </member>
        <member name="F:MXit.SDK._instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="F:MXit.SDK._version">
            <summary>
            This SDK's version.
            </summary>
        </member>
        <member name="M:MXit.SDK.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MXit.SDK"/> class from being created.
            </summary>
        </member>
        <member name="P:MXit.SDK.Instance">
            <summary>
            Singleton instance of the SDK class.
            </summary>
        </member>
        <member name="P:MXit.SDK.Version">
            <summary>
            This SDK's version.
            </summary>
        </member>
        <member name="T:MXit.User.ClientType">
            <summary>
            MXit client types (e.g. <see cref="F:MXit.User.ClientType.JavaMe"/>, <see cref="F:MXit.User.ClientType.WindowsMobile"/>, <see cref="F:MXit.User.ClientType.Android"/>, etc.).
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.JavaMe">
            <summary>
            Java ME.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.JavaMeLite">
            <summary>
            Java ME (Lite version).
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.WindowsMobile">
            <summary>
            Windows Mobile.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.IPhone">
            <summary>
            Apple iPhone.
            </summary>        
        </member>
        <member name="F:MXit.User.ClientType.Blackberry">
            <summary>
            Blackberry.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Android">
            <summary>
            Android.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.LibPurple">
            <summary>
            LibPurple-based (Pidgin, Adium, etc).
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Evo">
            <summary>
            Evo.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Web">
            <summary>
            Web-widget (Silverlight).
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Bada">
            <summary>
            Samsung Bada.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Daxtop">
            <summary>
            Daxtop.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.ThirdParty">
            <summary>
            Other Third-Party clients.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.WindowsPhone7">
            <summary>
            Windows Phone7.
            </summary>
        </member>
        <member name="F:MXit.User.ClientType.Wap">
            <summary>
            WAP client.
            </summary>
        </member>
        <member name="T:MXit.User.DeviceFeatures">
            <summary>
            Features that a MXit user's device may support.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.None">
            <summary>
            No device features.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Forms">
            <summary>
            Supports business forms.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.FileSend">
            <summary>
            Can send a file.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Camera">
            <summary>
            Has access to the device's camera.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Commands">
            <summary>
            Supports advanced links and other commands.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.SMS">
            <summary>
            Can send SMS messages.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.FileAccess">
            <summary>
            Has access to the device's file system.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.MIDP">
            <summary>
            Is an MIDP device.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Skins">
            <summary>
            Supports MXit skins.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.PlayAudio">
            <summary>
            Supports audio files.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Encryption">
            <summary>
            Supports encryption.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.RecordVoice">
            <summary>
            Has a voice recorder.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.ScalableVectorGraphics">
            <summary>
            Supports scalable vector graphics.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.InlineImages">
            <summary>
            Supports inline images.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Markup">
            <summary>
            Supports text markup (bold, italic, underline, etc. and basic links e.g. $linktext$).
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Vibes">
            <summary>
            Supports MXit vibes.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.RequestContacts">
            <summary>
            Can provide a selection from the user's roster (contact) list.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.CustomEmoticons">
            <summary>
            Supports custom emoticons.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.AlertProfiles">
            <summary>
            Supports alert profiles.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.FontSize">
            <summary>
            Can change the font size.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.PlainTextPassword">
            <summary>
            Clients that support this feature send login passwords in plain text when a user logs into MXit using the
            client.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.NoGateways">
            <summary>
            Does NOT support gateways.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.NoAvatars">
            <summary>
            Does NOT support avatars.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Gaming">
            <summary>
            Supports gaming markup.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.GamingUpdate">
            <summary>
            Supports gaming markup to partially update tables.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Voip">
            <summary>
            Supports voice-over-IP.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.Video">
            <summary>
            Supports real-time-video communication.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.TouchScreen">
            <summary>
            The device has a touch screen.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.SecondaryServiceConnection">
            <summary>
            Supports whether the device can make a secondary service connection.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceFeatures.MxmlSupport">
            <summary>
            Supports Mxit XML (Mxml) markup.
            </summary>
        </member>
        <member name="T:MXit.User.DeviceInfo">
            <summary>
            A device and MXit client through which a user is accessing MXit.
            </summary>
        </member>
        <member name="T:MXit.User.IDeviceInfo">
            <summary>
            A device and MXit client through which a user is accessing MXit.
            </summary>
            <exclude />
        </member>
        <member name="M:MXit.User.IDeviceInfo.HasFeature(MXit.User.DeviceFeatures)">
            <summary>
            Check if the device supports a device feature.
            </summary>
            <param name="feature">Device feature to check for.</param>
            <returns>True if the device supports the device feature.</returns>
        </member>
        <member name="P:MXit.User.IDeviceInfo.DisplayHeight">
            <summary>
            The device's display height (in pixels).
            </summary>
        </member>
        <member name="P:MXit.User.IDeviceInfo.DisplayWidth">
            <summary>
            The device's display width (in pixels).
            </summary>
        </member>
        <member name="P:MXit.User.IDeviceInfo.Features">
            <summary>
            A bitwise OR of all the <see cref="T:MXit.User.DeviceFeatures"/> that this <see cref="T:MXit.User.IDeviceInfo"/> supports.
            </summary>
        </member>
        <member name="P:MXit.User.IDeviceInfo.Version">
            <summary>
            The version of the MXit <see cref="P:MXit.User.IDeviceInfo.Client"/> that is installed on the device.
            </summary>
        </member>
        <member name="P:MXit.User.IDeviceInfo.Client">
            <summary>
            The type of the MXit client that is installed on the device.
            </summary>
        </member>
        <member name="F:MXit.User.DeviceInfo._defaultDevice">
            <summary>
            Default device, with very basic and device capabilities.
            </summary>
        </member>
        <member name="M:MXit.User.DeviceInfo.EnableFeature(MXit.User.DeviceFeatures)">
            <summary>
            Enable/add a device feature for this device.
            </summary>
            <param name="feature">Device feature.</param>
        </member>
        <member name="M:MXit.User.DeviceInfo.DisableFeature(MXit.User.DeviceFeatures)">
            <summary>
            Disable/remove a device feature for this device.
            </summary>
            <param name="feature">Device feature.</param>
        </member>
        <member name="M:MXit.User.DeviceInfo.HasFeature(MXit.User.DeviceFeatures)">
            <summary>
            Check if the device supports a device feature.
            </summary>
            <param name="feature">Device feature.</param>
            <returns>True if the device supports the device feature.</returns>
        </member>
        <member name="M:MXit.User.DeviceInfo.Equals(System.Object)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="obj">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.User.DeviceInfo.Equals(MXit.User.DeviceInfo)">
            <summary>
            Test if this object is logically equal to another object.
            </summary>
            <param name="obj">Object to test against.</param>
            <returns>True if the objects are logically equal.</returns>
        </member>
        <member name="M:MXit.User.DeviceInfo.GetHashCode">
            <summary>
            Generate a hash code for this object.
            </summary>
            <returns>A hash code for this object.</returns>
        </member>
        <member name="M:MXit.User.DeviceInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.User.DeviceInfo.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.User.DeviceInfo.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.User.DeviceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.DeviceInfo"/> class.
            </summary>
        </member>
        <member name="M:MXit.User.DeviceInfo.#ctor(MXit.User.IDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.DeviceInfo"/> class.
            </summary>
            <param name="device">The device to copy.</param>
        </member>
        <member name="M:MXit.User.DeviceInfo.#ctor(MXit.User.DeviceFeatures,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.DeviceInfo"/> class.
            </summary>
            <param name="deviceFeatures">Bitwise OR of device features supported by the message recipient's device.</param>
            <param name="displayWidth">Device display width (in pixels).</param>
            <param name="displayHeight">Device display height (in pixels).</param>
        </member>
        <member name="P:MXit.User.DeviceInfo.DefaultDevice">
            <summary>
            Default device, with very basic and device capabilities.
            </summary>
        </member>
        <member name="P:MXit.User.DeviceInfo.DisplayHeight">
            <summary>
            The device's display height (in pixels).
            </summary>
        </member>
        <member name="P:MXit.User.DeviceInfo.DisplayWidth">
            <summary>
            The device's display width (in pixels).
            </summary>
        </member>
        <member name="P:MXit.User.DeviceInfo.Client">
            <summary>
            The type of the MXit client that is installed on the device.
            </summary>
        </member>
        <member name="P:MXit.User.DeviceInfo.Version">
            <summary>
            The version of the MXit <see cref="P:MXit.User.DeviceInfo.Client"/> that is installed on the device.
            </summary>
        </member>
        <member name="P:MXit.User.DeviceInfo.Features">
            <summary>
            A bitwise OR of all the <see cref="T:MXit.User.DeviceFeatures"/> that this <see cref="T:MXit.User.DeviceInfo"/> supports.
            </summary>
        </member>
        <member name="T:MXit.User.GenderType">
            <summary>
            Types of gender that can be assigned to a MXit user's profile.
            </summary>
        </member>
        <member name="F:MXit.User.GenderType.Female">
            <summary>
            Female users.
            </summary>
        </member>
        <member name="F:MXit.User.GenderType.Male">
            <summary>
            Male users.
            </summary>
        </member>
        <member name="T:MXit.User.IPresenceInfo">
            <summary>
            Interface definition for a MXit user's online presence information.
            </summary>
            <exclude />
        </member>
        <member name="P:MXit.User.IPresenceInfo.UserId">
            <summary>
            User's unique UserId.
            </summary>
        </member>
        <member name="P:MXit.User.IPresenceInfo.IsOnline">
            <summary>
            True if the user is currently online.
            </summary>
        </member>
        <member name="T:MXit.User.IUserInfo">
            <summary>
            Interface definition for a MXit user.
            </summary>
            <exclude />
        </member>
        <member name="P:MXit.User.IUserInfo.UserId">
            <summary>
            Globally unique UserId for the user. Internal to MXit. Does not change.
            Database storage size is "varchar(50)".
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.DisplayName">
            <summary>
            Display name for the user (i.e. the nickname the user chooses for him- or her-self).
            Database storage size is "nvarchar(100)".
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.DateOfBirth">
            <summary>
            User's date of birth.
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.DeviceInfo">
            <summary>
            Device the user uses to access MXit.
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.CurrentCountry">
            <summary>
            User's current (roaming) country code.<br />
            <br />
            This is a best estimate of the user's current location, based on the IPs via which the
            user connects to MXit's platform. While this information should be fairly accurate,
            there is no guarantee that the information will always be available or correct.<br />
            <br />
            The country is returned as a 2-character uppercase string that conforms to ISO-3166-1 Alpha-2.
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.CurrentRegion">
            <summary>
            User's current (roaming) region code.<br />
            <br />
            You can use the following sources to interpret the region code:
            http://www.maxmind.com/app/fips10_4
            http://www.maxmind.com/app/iso3166_2
            <br />
            This is a best estimate of the user's current location, based on the IPs via which the
            user connects to MXit's platform. While this information should be fairly accurate,
            there is no guarantee that the information will always be available or correct.
            Database storage size is "varchar(4)".
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.CurrentCity">
            <summary>
            User's current (roaming) city.<br />
            <br />
            This is a best estimate of the user's current location, based on the IPs via which the
            user connects to MXit's platform. While this information should be fairly accurate,
            there is no guarantee that the information will always be available or correct.
            Database storage size is "nvarchar(64)".
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.Gender">
            <summary>
            The user's gender.
            </summary>
        </member>
        <member name="P:MXit.User.IUserInfo.RegisteredCountry">
            <summary>
            The country the user selected when he/she registered with MXit.<br />
            <br />
            The country is returned as a 2-character uppercase string that conforms to ISO-3166-1 Alpha-2.
            </summary>
        </member>
        <member name="T:MXit.User.Presence">
            <summary>
            A MXit user's online presence information.
            </summary>
        </member>
        <member name="M:MXit.User.Presence.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.User.Presence.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.User.Presence.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.User.Presence.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.Presence"/> class.
            </summary>
            <param name="userId">MXit user's UserId.</param>
            <param name="isOnline">True if the user is currently online.</param>
        </member>
        <member name="P:MXit.User.Presence.UserId">
            <summary>
            MXit user's UserId.
            </summary>
        </member>
        <member name="P:MXit.User.Presence.IsOnline">
            <summary>
            True if the user is currently online.
            </summary>
            <example>
            <code>
            public void OnPresenceReceived(Presence userPresence)
            {
                if (!userPresence.IsOnline)
                {
                    // Clean up session
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="T:MXit.User.UserInfo">
            <summary>
            Information about a MXit user.
            </summary>
        </member>
        <member name="M:MXit.User.UserInfo.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:MXit.User.UserInfo.ToString(System.Int32,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="indent">The indent.</param>
            <param name="spacer">The spacer.</param>
            <param name="equals">The equals.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MXit.User.UserInfo.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:MXit.Common.WithExpandedToString.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            <code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.User.UserInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.UserInfo"/> class.
            </summary>
        </member>
        <member name="M:MXit.User.UserInfo.#ctor(System.String,System.String,System.DateTime,System.String,System.String,System.String,MXit.User.DeviceInfo,MXit.User.GenderType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.UserInfo"/> class.
            </summary>
            <param name="userId">Globally unique UserId for the user.</param>
            <param name="displayName">Display name for the user (i.e. the nickname the user chooses for him- or her-self).</param>
            <param name="dateOfBirth">User's date of birth.</param>
            <param name="currentCountry">User's current country code.</param>
            <param name="currentRegion">User's current region code.</param>
            <param name="currentCity">User's current city.</param>
            <param name="deviceInfo">Device the user uses to access MXit.</param>
            <param name="gender">The user's gender.</param>
            <param name="registeredCountry">The user's registed country code (ISO-3166-1 Alpha-2).</param>
        </member>
        <member name="P:MXit.User.UserInfo.UserId">
            <summary>
            Globally unique UserId for the user. Internal to MXit. Does not change.
            Database storage size is "varchar(50)".
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.DisplayName">
            <summary>
            Display name for the user (i.e. the nickname the user chooses for him- or her-self).
            Database storage size is "nvarchar(100)".
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.DateOfBirth">
            <summary>
            User's date of birth.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.CurrentCountry">
            <summary>
            User's current (roaming) country code.<br />
            <br />
            This is a best estimate of the user's current location, based on the IPs via which the
            user connects to MXit's platform. While this information should be fairly accurate,
            there is no guarantee that the information will always be available or correct.<br />
            <br />
            The country is returned as a 2-character uppercase string that conforms to ISO-3166-1 Alpha-2.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.CurrentRegion">
            <summary>
            User's current (roaming) region code.<br />
            <br />
            You can use the following sources to interpret the region code:
            http://www.maxmind.com/app/fips10_4
            http://www.maxmind.com/app/iso3166_2
            <br />
            This is a best estimate of the user's current location, based on the IPs via which the
            user connects to MXit's platform. While this information should be fairly accurate,
            there is no guarantee that the information will always be available or correct.
            Database storage size is "varchar(4)"
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.CurrentCity">
            <summary>
            User's current (roaming) city.<br />
            <br />
            This is a best estimate of the user's current location, based on the IPs via which the
            user connects to MXit's platform. While this information should be fairly accurate,
            there is no guarantee that the information will always be available or correct.
            Database storage size is "nvarchar(64)".
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.DeviceInfo">
            <summary>
            Device the user uses to access MXit.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.Gender">
            <summary>
            The user's gender.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfo.RegisteredCountry">
            <summary>
            The country the user selected when he/she registered with MXit.<br />
            <br />
            The country is returned as a 2-character uppercase string that conforms to ISO-3166-1 Alpha-2.
            </summary>
        </member>
        <member name="T:MXit.User.UserInfoRequest">
            <summary>
            An asynchronous request for a MXit user's information.
            </summary>
        </member>
        <member name="M:MXit.User.UserInfoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.UserInfoRequest"/> class.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfoRequest.UserId">
            <summary>
            UserId of the MXit user who's information will be requested.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfoRequest.ContactName">
            <summary>
            The context within which the user is currently accessing your ExternalApp.<br/>
            <br/>
            This is the value of the <see cref="P:MXit.Messaging.Message.To"/> parameter of the message the user
            sent to your ExternalApp. I.e. it is the name of the contact within which the user is accessing your
            ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfoRequest.Context">
            <summary>
            Context information to associate with the asynchronous request.
            </summary>
        </member>
        <member name="T:MXit.User.UserInfoResponse">
            <summary>
            A response to an asynchronous request for a MXit user's information.
            </summary>
        </member>
        <member name="F:MXit.User.UserInfoResponse._userId">
            <summary>
            See <see cref="P:MXit.User.UserInfoResponse.UserId"/>.
            </summary>
        </member>
        <member name="F:MXit.User.UserInfoResponse._contactName">
            <summary>
            See <see cref="P:MXit.User.UserInfoResponse.ContactName"/>.
            </summary>
        </member>
        <member name="F:MXit.User.UserInfoResponse._user">
            <summary>
            See <see cref="P:MXit.User.UserInfoResponse.User"/>.
            </summary>
        </member>
        <member name="M:MXit.User.UserInfoResponse.ToStringAddKeyValueItems(System.Text.StringBuilder,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Adds key-value items to the output produced by a call to <see cref="M:System.Object.ToString"/>.
            </summary>
            <param name="sb">The string builder to add the key-value items to.</param>
            <param name="itemFormat">The key-value item format.</param>
            <param name="indent">Number of indentations.</param>
            <param name="spacer">String to use as indentation spacer.</param>
            <param name="equals">String to use a equals sign.</param>
            <param name="preText">The pre-text before each entry per line.</param>
            <example>
            	<code>
            // This function will typically contain a series of name/value entries, e.g.
            sb.AppendFormat(itemFormat, "Name", Name);
            sb.AppendFormat(itemFormat, "Port", Port);
            sb.AppendFormat(itemFormat, "Host", System.Net.Dns.GetHostName());
            </code>
            </example>
        </member>
        <member name="M:MXit.User.UserInfoResponse.#ctor(MXit.Async.AsyncOperationResult,System.Object,System.String,System.String,MXit.User.UserInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:MXit.User.UserInfoResponse"/> class.
            </summary>
            <param name="result">The asynchronous operation's result.</param>
            <param name="context">Context information that was associated with the asynchronous request when it was initiated.</param>
            <param name="userId">UserId of the MXit user whos information was requested.</param>
            <param name="contactName">The name of the contact within which the user was accessing the ExternalApp at the time the request was made.</param>
            <param name="user">The MXit user's information that was retrieved.</param>
        </member>
        <member name="P:MXit.User.UserInfoResponse.UserId">
            <summary>
            UserId of the MXit user who's information was requested.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfoResponse.ContactName">
            <summary>
            The context within which the user was accessing your ExternalApp at the time the request was made.<br />
            <br />
            This is the name of the contact within which the user was accessing your ExternalApp.
            </summary>
        </member>
        <member name="P:MXit.User.UserInfoResponse.User">
            <summary>
            The MXit user's information that was retrieved. If the asynchronous request did not complete
            successfully, this property will be <c>null</c>.
            </summary>
        </member>
    </members>
</doc>
